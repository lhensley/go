#!/bin/bash

# READ THIS BEFORE RUNNING!
# The ./variables file MUST be EDITED and run ONLY on a newly-installed OS,
# and NOT an existing or upgraded system.
#
# EVERY TIME THE SSH KEYS OR SEED FILE PASSWORD ARE UPDATED:
#   • Install the new ssh keys on a stable server.
#   • Make sure that these files are current and error-free
#       clean-setup
#       make-seed-file
#       variables
#   • Run 'cd && sudo make-seed-file'
#       (The password for encrypting the file can be found in 1Password.)
#   • Copy the seed file to the YUMI/Installation USB flash drive
#     • Plug the USB flash drive into a USB port on the server.
#     • The OS should mount it automatically.
#     • Use the df command to find the name of the mount point. 
#       'mount-point' probably = /dev/sda1
#     • Issue this command: sudo cp ~/seed* [mount_point]/
#   • Unmount the USB flash drive: sudo umount [mount_point]/
# 
# TO INSTALL FROM THE USB FLASH DRIVE
#   • Follow the instructions from "Installing Ubuntu" on OneNote
#     to install a clean Ubuntu operating system.
#   • Boot the new system and get to the command line.
#   • Re-insert the USB flash drive
#     • Plug the USB flash drive into a USB port on the server.
#     • The OS should mount it automatically.
#     • Use the df command to find the name of the mount point.
#     • Issue this command: 
#       • mkdir ~/SETUP && cp [mount_point]/seed* ~/SETUP/ && cd ~/SETUP && ls ./seed*
#     • Make a note of which seed file is most current and viable.
#     • Issue these commands: 
#       • cp ./[current_seed_file] ./seed.tar.gz.gpg
#       • sudo apt-get update && sudo apt-get dist-upgrade
#       • sudo apt-get install gpg
#       • gpg -d -g seed.tar.gz seed.tar.gz.gpg
#       • tar -xzf ~/SETUP/tar.gz.gpg -C ~/SETUP
#       • chmod 700 ~/SETUP/clean-setup && ~/SETUP/clean-setup
#

# Make sure we're root.
if [[ $EUID -ne 0 ]]; then
        echo "Use sudo. $0 must be run as root." 1>&2
        exit 1
    fi

# Set a flag to confirm that the variables are not yet defined
VARIABLES_ARE_DEFINED=false
source ./variables

# Confirm that the variables have been updated.
    echo
    echo -en "\007" # Beep
    echo "STOP!"
    echo "Have you updated the './variables' file? It's critical that you do."
    echo "You MUST type the word CONFIRMED and press RETURN/ENTER to continue."
    read USER_INPUT
    if [ "X$USER_INPUT" != "XCONFIRMED" ] ; then
        echo 
        echo "Confirmation FAILED."
        echo
        exit 1
        fi
    echo
    echo "Confirmed."
    echo

# Get timestamp
    TIMESTAMP=$(/bin/date '+%Y-%m-%d-%H-%M-%S-%Z')

# Set timezone
    echo timedatectl set-timezone $TIMEZONE
    timedatectl set-timezone $TIMEZONE

# Get us into noninteractive mode
    export DEBIAN_FRONTEND=noninteractive

# Add universe (and multiverse?) repository
# More info is at https://itsfoss.com/ubuntu-repositories/
    REPOSITORY="universe"
    grep -h "$REPOSITORY" /etc/apt/sources.list > /dev/null 2>&1
    if [ $? -ne 0 ]; then
      echo
      echo "Adding the $REPOSITORY repository"
      add-apt-repository --yes $REPOSITORY
      fi
    # echo
    # echo "Adding the universe repository"
    # add-apt-repository --yes universe

    # Update packages
    # apt vs apt-get?
    #   Res (defining): https://askubuntu.com/questions/990823/apt-gives-unstable-cli-interface-warning
    #   Res: https://itsfoss.com/apt-vs-apt-get-difference/
    #   Res: https://linuxconfig.org/apt-vs-apt-get-advanced-package-tool
    #   Res: https://www.google.com/search?q=apt+and+apt-get
    # "update" downloads package information from all configured sources
    # "upgrade" is an extraneous subset of "dist-upgrade" below;
    #    Ref: https://askubuntu.com/questions/194651/why-use-apt-upgrade-instead-of-apt-dist-upgrade#:~:text=apt%2Dget%20upgrade%20will%20not,install%20but%20not%20remove%20packages
    #    sudo apt-get --yes upgrade \
    # "dist-upgrade" installs available upgrades of all packages
    # currently installed on the system and intelligently handles
    # changing dependencies with new versions of packages
    echo
    echo Updating local host of upgradable packages and upgrading them.
    echo DEBIAN_FRONTEND=noninteractive apt-get --yes update && DEBIAN_FRONTEND=noninteractive apt-get --yes dist-upgrade
    DEBIAN_FRONTEND=noninteractive apt-get --yes update && DEBIAN_FRONTEND=noninteractive apt-get --yes dist-upgrade
    # "clean" clears out the local repository of retrieved package files.
    echo
    echo Clearing out the local repository of retrieved package files.
    echo apt-get --yes clean
    apt-get --yes clean
    # "autoremove" removes those dependencies that were installed with
    # now-removed applications and that are no longer used
    # by anything else on the system
    echo
    echo "Removing those dependencies that were associated with non-removed applications that no longer are used"
    echo apt-get --yes autoremove
    apt-get --yes autoremove

# # Install git and open the git port
#     echo
#     echo Installing and configuring git
#     apt-get install --yes git
#     ufw allow git

# Copy .gitconfig* to $ADMIN_DIR
#     ADMIN_FILE="$ADMIN_DIR/$BASEFILE"
#     cp "$OUTFILE"* $ADMIN_DIR/
#     chown $ADMIN_USER:$ADMIN_USER "$ADMIN_FILE"*

# Copy .ssh, .git*, clean-setup, and variable files and set permissions
    echo
    echo cd $ADMIN_DIR/SETUP
	cd $ADMIN_DIR/SETUP
    #############
    echo
    echo cp -r $ADMIN_DIR/SETUP/.ssh $ADMIN_DIR/.
    cp -r $ADMIN_DIR/SETUP/.ssh $ADMIN_DIR/.
    echo
    echo chown -R $ADMIN_USER:$ADMIN_USER $ADMIN_DIR/.ssh
    chown -R $ADMIN_USER:$ADMIN_USER $ADMIN_DIR/.ssh
    echo
    echo chmod 700 $ADMIN_DIR/.ssh
    chmod 700 $ADMIN_DIR/.ssh
    echo
    echo chmod -R 600 $ADMIN_DIR/.ssh/*
    chmod -R 600 $ADMIN_DIR/.ssh/*
    echo
    echo chmod 644 $ADMIN_DIR/.ssh/id_ed25519.pub
    chmod 644 $ADMIN_DIR/.ssh/id_ed25519.pub
    #############
    echo
    echo cp $ADMIN_DIR/SETUP/.git* $ADMIN_DIR/.
    cp $ADMIN_DIR/SETUP/.git* $ADMIN_DIR/.
    echo
    echo chown $ADMIN_USER:$ADMIN_USER $ADMIN_DIR/.git* $ADMIN_DIR/SETUP/clean-setup $ADMIN_DIR/SETUP/variables
    chown $ADMIN_USER:$ADMIN_USER $ADMIN_DIR/.git* $ADMIN_DIR/SETUP/clean-setup $ADMIN_DIR/SETUP/variables
    echo
    echo chmod 600 $ADMIN_DIR/.git*
    chmod 600 $ADMIN_DIR/.git*
    echo
    echo chmod 700 $ADMIN_DIR/SETUP/clean-setup $ADMIN_DIR/SETUP/variables
    chmod 700 $ADMIN_DIR/SETUP/clean-setup $ADMIN_DIR/SETUP/variables
    # echo
    # echo rm -r $ADMIN_DIR/SETUP
    # rm -r $ADMIN_DIR/SETUP

###############################################################################################################
exit 1
###############################################################################################################

# Wipe out existing git and /usr/local/sbin if they exist
    echo
    echo Clearing "$GIT_ROOT" and "$SBIN_DIR"
    rm -rf "$GIT_ROOT" "$SBIN_DIR"

# Clone go.git and set restrictive permissions
    echo
    echo "Cloning go.git and setting permissions"
    mkdir -p "$GIT_ROOT"
    chmod 775 "$GIT_ROOT"
    cd "$GIT_ROOT"
    git clone https://github.com/$GITHUB_USER/go.git
    chown -R $ROOT_USER:$ROOT_USER "$GIT_ROOT"
    chmod -R 400 "$GIT_ROOT"
    cd

# Copy scripts into /usr/local/sbin
    echo
    echo "Copying scripts into /usr/local/sbin"
    cp -r "$GIT_GO_SBIN" "$SBIN_PARENT"
    chown -R $ROOT_USER:$ROOT_USER "$SBIN_DIR"
    find "$SBIN_DIR" -type d -print0 | sudo xargs -0 chmod 750
    find "$SBIN_DIR" -type f -print0 | sudo xargs -0 chmod 540

# Hand off to newly-downlaoded _setup2
    echo
    echo "Handing off to _setup2"
    /usr/local/sbin/_setup2

##############################################################
################# GITHUB FILES NOW ARE FULLY LOADED AND READY.
##############################################################
