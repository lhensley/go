#!/bin/bash
# cold-backup

# Include script setup file
	source script-setup
	if [ ! $FUNCTIONS_ARE_DEFINED ]; then echo $0: Functions not defined. Aborting; logger $0: Functions not defined. Aborting; fi
	if [ ! $VARIABLES_ARE_DEFINED ]; then echo $0: Variables not defined. Aborting; logger $0: Variables not defined. Aborting; fi

# Stop services as needed
	systemctl stop $COLD_PROTECTED_SERVICES

# Store current directory and switch to root
CURRENT_DIRECTORY="$(pwd)"
cd /

# If file system is mounted and read-only, unmount
if [ $(findmnt "$COLD_BACKUP_FILE_SYSTEM" -n -o options | grep "ro,") ]; then
	umount "$COLD_BACKUP_FILE_SYSTEM"
fi

# If file system is not mounted, mount it read-write
if [ "findmnt $COLD_BACKUP_FILE_SYSTEM" ]; then
	mount -o rw "$COLD_BACKUP_FILE_SYSTEM"
fi

# If file system is not mounted read-write, fail
if [ ! $(findmnt "$COLD_BACKUP_FILE_SYSTEM" -n -o options | grep "rw,") ]; then
	logger $0: FATAL: $COLD_BACKUP_FILE_SYSTEM is not mounted with rw option
	echo $0: FATAL: $COLD_BACKUP_FILE_SYSTEM is not mounted with rw option
	exit 1
fi

# Make container directory
mkdir -p $COLD_BACKUP_DIRECTORY

# Do backup with rsync
# rsync options used
#    -a = archive mode, equivalent to -rlptgoD
#    -g = preserve group ownership
#    -l = recreate symlinks on destination
#    -n = dry run
#    -o = preserve owner
#    -p = preserve permissions
#    -q = quiet
#    -r = recursive (includes subdirectories)
#    -t = preserve modification times
#    -v = verbose
#    -D = preserve device files and special files
#    -E = preserve executability
#    -R = use relative paths (see https://linux.die.net/man/1/rsync for more info)
#    --delete = delete extraneous files from dest dirs
rsync -aloprtvER --delete $COLD_BACKUP_SOURCES $COLD_BACKUP_DIRECTORY

# Restore working directory
cd "$CURRENT_DIRECTORY"

# If cold backup file system is flagged as ro, unmount & remount ro
if [ $COLD_BACKUP_FS_READ_ONLY ]; then
	umount $COLD_BACKUP_FILE_SYSTEM
	mount -o ro $COLD_BACKUP_FILE_SYSTEM
	fi

# Start services as needed
	systemctl start $COLD_PROTECTED_SERVICES

# Include script footer file
	f_debug_variable "script_footer" "${PATHNAME[script_footer]}"
	source "${PATHNAME[script_footer]}"

exit 0
