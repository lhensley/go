#!/bin/bash
# lgh

# Include script setup file
	source script-setup
	if [ ! $FUNCTIONS_ARE_DEFINED ]; then echo $0: Functions not defined. Aborting; logger $0: Functions not defined. Aborting; exit 1; fi
	if [ ! $VARIABLES_ARE_DEFINED ]; then echo $0: Variables not defined. Aborting; logger $0: Variables not defined. Aborting; exit 1; fi

    set -x

    # Tested through Ubuntu 20.04.1
    # Install Plex Media Server
      echo "Installing Plex Media Server"
      rm -rf /etc/apt/sources.list.d/plexmediaserver.list
      echo "# When enabling this repo please remember to add the PlexPublic.Key into the apt setup." > /etc/apt/sources.list.d/plexmediaserver.list
      echo "# wget -q https://downloads.plex.tv/plex-keys/PlexSign.key -O - | sudo apt-key add -" >> /etc/apt/sources.list.d/plexmediaserver.list >> /etc/apt/sources.list.d/plexmediaserver.list
      echo "#" >> /etc/apt/sources.list.d/plexmediaserver.list >> /etc/apt/sources.list.d/plexmediaserver.list
      echo "deb https://downloads.plex.tv/repo/deb/ public main" >> /etc/apt/sources.list.d/plexmediaserver.list >> /etc/apt/sources.list.d/plexmediaserver.list
      wget -q https://downloads.plex.tv/plex-keys/PlexSign.key -O - | sudo apt-key add -
      apt-get -y update
      apt-get install --reinstall -o Dpkg::Options::="--force-confold" plexmediaserver
      # f_install plexmediaserver
      ufw allow 32400/tcp # if not already specified
      echo "Plex Media Server installed."
        # Install Tautulli for https://this-server:8181
        # Ref: https://tautulli.com/
            DEBIAN_FRONTEND=noninteractive apt-get install -yq python python-setuptools tzdata
            cd /opt
            git clone https://github.com/Tautulli/Tautulli.git
            addgroup tautulli && sudo adduser --system --no-create-home tautulli --ingroup tautulli
            cp /opt/Tautulli/init-scripts/init.systemd /lib/systemd/system/tautulli.service
            chown tautulli:tautulli -R /opt/Tautulli
            systemctl daemon-reload
            systemctl enable tautulli.service
            systemctl start tautulli.service
            ufw allow 8181
            cd


  exit 1




set -x

# Make the cold backup file system writable
if [ $COLD_BACKUP_FS_READ_ONLY ]; then
	f_mount_ro_fs_as_rw "$COLD_BACKUP_FILE_SYSTEM"
	fi

# Archive the cold backup
 	mkdir -p "$THIS_ARCHIVE_DIRECTORY"
 	nice tar $BACKUP_OPTIONS $COLD_BACKUP_DIRECTORY
	nice cp "$ARCHIVE_TAR_FULL_WEEKDAY" "$ARCHIVE_TAR_FULL_MONTH"

if [ $COLD_BACKUP_FS_READ_ONLY ]; then
	f_mount_ro_fs_as_ro "$COLD_BACKUP_FILE_SYSTEM" $COLD_BACKUP_FS_READ_ONLY
	fi

set +x

exit 0

f_require_value "MakeMKV Program Path" "${PATHNAME[makemkvcones]}"
f_require_value "MakeMKV Output Directory" "$MAKEMKV_OUTPUT_DIRECTORY"
exit 0


# Include script setup file
	echo ${LINENO}
	source script-setup
	echo ${LINENO}
	if [ ! $FUNCTIONS_ARE_DEFINED ]; then echo $0: Functions not defined. Aborting; logger $0: Functions not defined. Aborting; exit 1; fi
	echo ${LINENO}
	if [ ! $VARIABLES_ARE_DEFINED ]; then echo $0: Variables not defined. Aborting; logger $0: Variables not defined. Aborting; exit 1; fi
	echo ${LINENO}

if [ -z "$1" ]; then
  echo "Usage: rip \"Title (year) [ movie | <minimum_number_of_seconds> ]\" &"
  exit -1
  fi
echo ${LINENO}

if [ -z "$2" ]; then
    MINLENGTH=1200
  else if [ "$2" == "movie" ]; then
    MINLENGTH=4500
    else MINLENGTH=$2
    fi
  fi
echo ${LINENO}

f_require_value "MakeMKV Program Path" "${PATHNAME[makemkvcon]}"
echo ${LINENO}
f_require_value "MakeMKV Output Directory" "$MAKEMKV_OUTPUT_DIRECTORY"
echo ${LINENO}

sudo -u $RUN_AS mkdir -p "$MAKEMKV_OUTPUT_DIRECTORY/$1"
echo ${LINENO}
f_require_directory "$MAKEMKV_OUTPUT_DIRECTORY/$1"
echo ${LINENO}

sudo -u $RUN_AS nice "${PATHNAME[makemkvcon]}" --minlength=$MINLENGTH mkv disc:0 all "$MAKEMKV_OUTPUT_DIRECTORY/$1"
exit_status=$?
f_beep
eject
if [ $exit_status -eq 0 ] ; then
  echo "$1: Disk ripping completed successfully." | mail "$TEXT_ALERTS"
  else echo "$1: Disk ripping FAILED. Code $exit_status" | mail "$TEXT_ALERTS"
  fi





# Include script footer file
	f_debug_variable "script_footer" "${PATHNAME[script_footer]}"
	source "${PATHNAME[script_footer]}"

exit 0