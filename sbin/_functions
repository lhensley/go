#!/bin/bash
# _functions
# Bash functions for Lane applications


# Check to ensure that variables are defined
	if [ ! $VARIABLES_ARE_DEFINED ]; then echo $0: Variables not defined. Aborting; logger $0: Variables not defined. Aborting; fi

# Set a flag to confirm that the functions are not yet defined
FUNCTIONS_ARE_DEFINED=false

function f_debug () {
    # $1: message to log, only used when $DEBUG_MODE == true
    if [ $DEBUG_MODE ]; then
        logger $0: DEBUG: $1
        fi
    }

function f_debug_variable () {
    # $1: variable_name
    # $2: variable_value ("$variable_name")
    # Example: f_debug_variable "var" "$var"
    if [ $DEBUG_MODE ]; then
        logger $0: DEBUG: $1 = $2
        fi
    }

function f_require_value {
# $1 = Variable name  e.g., "INPUT_FILE"
# $2 = Content of variable, e.g., "$INPUT_FILE"
    if [ -z "$2" ]; then
	    echo "$0: FATAL: Value of $1 undefined."
	    logger "$0: FATAL: Value of $1 undefined."
	    exit 1
	    fi
    }

function f_require_file {
    f_require_value "(file name)" "$1"
    if [ ! -f "$1" ]; then
	    echo $0: FATAL: File not found: $1
	    logger $0: FATAL: File not found: $1
	    exit 1
	    fi
    }

function f_require_directory {
    f_require_value "(directory name)" "$1"
    if [ ! -d "$1" ]; then
	    echo "$0: FATAL: Directory not found: $1"
	    logger "$0: FATAL: Directory not found: $1"
	    exit 1
	    fi
    }

function f_file_not_in_use {
    f_require_file "$1"
    if [ -n "$(lsof "$1" 2>/dev/null)" ]; then
	    echo "$0: FATAL: File in use: $1"
	    logger "$0: FATAL: File in use: $1"
        exit 1
        fi
    }

function f_filter () {
    STRING_BEING_EVALUATED=$1
    FILTER=$2
    MATCH=false

    # Ref: https://superuser.com/questions/1066455/how-to-split-a-string-with-quotes-like-command-arguments-in-bash
    eval "array=($FILTER)"
    for thisfilter in "${array[@]}"; do if [[ $STRING_BEING_EVALUATED == *"$thisfilter"* ]]; then MATCH=true ; fi; done
    echo $MATCH
	}

function f_clear_directory_contents() {
	f_require_directory "$1"
	rm -rf "$1"/*
	}

function f_local_copy() {
# $1 = source directory; MUST BE A DIRECTORY and not file(s); no trailing slash!
# $2 = target directory; MUST BE A DIRECTORY and not file(s); no trailing slash!
	f_require_directory "$1"
	f_require_directory "$2"
	mkdir -p "$2"
	rsync -q -a --delete "$1" "$2"
	# -q = quiet
	# -a = same as -rlptgoD
		# -r = recursive
		# -l = copy symlinks as symlinks
		# -p = preserve permisions
		# -t = preserve modification times
		# -g = preserve group
		# -o = preserve ownership
		# -D = preserve device files and special files
	# --delete = delete extraneous files from dest dirs
	}

# Set a flag to confirm that the functions are defined
	FUNCTIONS_ARE_DEFINED=true

# Log the completion
	logger $0: Functions loaded from _functions

function f_install() {
	if ! [ -x "$(command -v $1)" ]; then   
		logger $0 Installing $1
		DEBIAN_FRONTEND=noninteractive apt-get install -yq $1
		logger $0 Installation of $1 done exit code $?
	fi
	}

function f_chmod() {
# Only one file or directory at a time. No flags, wildcards, or multiple files or directories
	if [ -f "$2" ] || [ -d "$2" ]; then
		chmod $1 $2
	fi
	}

