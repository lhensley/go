#!/bin/bash
# _functions
# Bash functions for Lane applications

# Check to ensure that variables are defined
	if [ ! $VARIABLES_ARE_DEFINED ]; then echo $0: Variables not defined. Aborting; logger $0: Variables not defined. Aborting; exit 1; fi

# Set a flag to confirm that the functions are not yet defined
FUNCTIONS_ARE_DEFINED=false

function f_log_and_echo () {
# Usage f_log_and_echo "$MESSAGE_TO_STDERR_AND_LOG" "SEND_TEXT_ALERT_TRUE_OR_FALSE"
	if $2; then echo $1 | mail $TEXT_ALERTS; fi
	logger $1
	>&2 echo $1
	}

function f_beep () {
	echo -en "\007" # Beep
	}

function f_balk () {
	# Report and log the objection; does NOT exit the program or function
	# Usage: f_balk "$MESSAGE_TO_STDERR_AND_LOG" "SEND_TEXT_ALERT_TRUE_OR_FALSE"
		f_log_and_echo "$1" "$2"
		f_beep
	}

function f_die () {
	# Usage: f_die "$MESSAGE_TO_STDERR_AND_LOG" "SEND_TEXT_ALERT_TRUE_OR_FALSE"
		f_balk "$1" "$2" # report and log the objection
		exit 1
	}

function f_debug () {
    # $1: message to log, only used when $DEBUG_MODE == true
    if [ ! $DEBUG_MODE ]; then
        logger $0: DEBUG: $1
        fi
    }

function f_debug_variable () {
    # $1: variable_name
    # $2: variable_value ("$variable_name")
    # Example: f_debug_variable "var" "$var"
    if [ ! $DEBUG_MODE ]; then
        logger $0: DEBUG: $1 = $2
        fi
    }

function f_variable_has_content {
	# Usage: if $(f_variable_has_content "$SAMPLE"); then commands_if_true; else commands_if_false; fi
	# $1 = Content of variable, e.g., "$INPUT_FILE"
    if [ -z "$1" ]; then echo false; else echo true; fi
    }

function f_require_value {
	# $1 = Variable name  e.g., "INPUT_FILE"
	# $2 = Content of variable, e.g., "$INPUT_FILE"
	# $3 = Send text alert (true or false)
    if ! $(f_variable_has_content "$2"); then f_die "$0: FATAL: Value of $1 undefined at line ${BASH_LINENO[$i]}" false; fi
    }

function f_is_file {
	# Usage: if $(f_is_file "file_or_path_name"); then commands_if_true; else commands_if_false; fi
	# $1 = "$string_to_check"
    if [ -f "$1" ]; then echo true; else echo false; fi
	}

function f_require_file {
    # Usage: f_require_file "file_or_path_name" "send_text_alert_true_or_false"
	if ! $(f_is_file "$1"); then f_die "$0: FATAL: File not found: $1 at line ${BASH_LINENO[$i]}" false; fi
    }

function f_is_directory {
	# Usage: if $(f_is_directory "directory_name"); then commands_if_true; else commands_if_false; fi
	# $1 = "$string_to_check"
    if [ -d "$1" ]; then echo true; else echo false; fi
	}

function f_require_directory {
    # Usage: f_require_directory "directory_name" "send_text_alert_true_or_false"
	if ! $(f_is_directory "$1"); then f_die "$0: FATAL: Directory not found: $1 at line ${BASH_LINENO[$i]}" false; fi
    }

function f_require_true {
    # Usage: f_require_true "true_or_false_proposition" "send_text_alert_true_or_false" "failure_message"
	# Example: f_require_true false true "$0: Proposition fails. Sending text alerts."
	if [ ! "$1" ]; then f_die "$2" $3; fi
    }

function f_file_not_in_use {
	# Usage: f_file_not_in_use "file_that_must_not_be_in_use" "failure_message" "send_text_alert_true_or_false"
    f_require_file "$1" false
    if [ -n "$(lsof "$1" 2>/dev/null)" ]; then f_die "$2" "$3"; fi
    }

function f_in_use {
	# Usage: if $(f_in_use "$SAMPLE"); then commands_if_true; else commands_if_false; fi
	# $1 = "$string_to_check"
    if [ -d -n "$(lsof "$1" 2>/dev/null)" ]; then echo true; else echo false; fi
	}

function f_filter () {
    STRING_BEING_EVALUATED=$1
    FILTER=$2
    MATCH=false

    # Ref: https://superuser.com/questions/1066455/how-to-split-a-string-with-quotes-like-command-arguments-in-bash
    eval "array=($FILTER)"
    for thisfilter in "${array[@]}"; do if [[ $STRING_BEING_EVALUATED == *"$thisfilter"* ]]; then MATCH=true ; fi; done
    echo $MATCH
	}

function f_clear_directory_contents() {
	f_require_directory "$1" false
	rm -rf "$1"/*
	}

function f_local_copy() {
# $1 = source directory; MUST BE A DIRECTORY and not file(s); no trailing slash!
# $2 = target directory; MUST BE A DIRECTORY and not file(s); no trailing slash!
	f_require_directory "$1" false
	f_require_directory "$2" false
	mkdir -p "$2"
	rsync -q -a --delete "$1" "$2"
	# -q = quiet
	# -a = same as -rlptgoD
		# -r = recursive
		# -l = copy symlinks as symlinks
		# -p = preserve permisions
		# -t = preserve modification times
		# -g = preserve group
		# -o = preserve ownership
		# -D = preserve device files and special files
	# --delete = delete extraneous files from dest dirs
	}

# Set a flag to confirm that the functions are defined
	FUNCTIONS_ARE_DEFINED=true

function f_install() {
	if ! [ -x "$(command -v $1)" ]; then   
		logger $0 Installing $1
		DEBIAN_FRONTEND=noninteractive apt-get install -yq $1
		logger $0 Installation of $1 done exit code $?
	fi
	}

function f_chmod() {
# Only one file or directory at a time. No flags, wildcards, or multiple files or directories
	if [ -f "$2" ] || [ -d "$2" ]; then
		chmod $1 $2
	fi
	}

function f_mount_ro_fs_as_rw () {
	FILE_SYSTEM=$1
	# If file system is mounted and read-only, unmount
		if [ $(findmnt "$FILE_SYSTEM" -n -o options | grep "ro,") ]; then
			umount "$FILE_SYSTEM"
		fi
	# If file system is not mounted, mount it read-write
		if [ "findmnt $FILE_SYSTEM" ]; then
			mount -o rw "$FILE_SYSTEM"
		fi
	# If file system is not mounted read-write, fail
		if [ ! $(findmnt "$FILE_SYSTEM" -n -o options | grep "rw,") ]; then
			logger $0: FATAL: $FILE_SYSTEM is not mounted with rw option
			echo $0: FATAL: $FILE_SYSTEM is not mounted with rw option
			exit 1
		fi
	}
	
function f_mount_ro_fs_as_ro () {
	FILE_SYSTEM=$1
	FS_READ_ONLY=$2
	# If file system is mounted and read-write, unmount
		if [ $(findmnt "$FILE_SYSTEM" -n -o options | grep "rw,") ]; then
			umount "$FILE_SYSTEM"
		fi
	# If cold backup file system is flagged as ro, unmount & remount ro
	if [ $FS_READ_ONLY ]; then
		mount -o ro "$FILE_SYSTEM"
		fi
	# If file system is not mounted read-only, fail
		if [ ! $(findmnt "$FILE_SYSTEM" -n -o options | grep "ro,") ]; then
			logger $0: FATAL: $FILE_SYSTEM is not mounted with ro option
			echo $0: FATAL: $FILE_SYSTEM is not mounted with ro option
			exit 1
		fi
	}

function f_set_plex_media_recursive_permissions () {
	f_require_directory "$VIDEO_WORK_DIRECTORY" false
    find "$VIDEO_WORK_DIRECTORY" -type d -print -exec chmod 775 {} \;
    find "$VIDEO_WORK_DIRECTORY" -type f -print -exec chmod 664 {} \;
	f_require_directory "$VIDEO_STORE_DIRECTORY" false
    find "$VIDEO_STORE_DIRECTORY" -type d -print -exec chmod 775 {} \;
    find "$VIDEO_STORE_DIRECTORY" -type f -print -exec chmod 664 {} \;
	}

function f_move_one_plex_file () {
	SOURCE_FILE="$1"
	TARGET_FILE="$2"

	f_log_and_echo "$0: Moving $(basename \"$SOURCE_FILE\")" false
	if ! $(f_is_file "$SOURCE_FILE");                   then f_balk "$0: Source file not found: $1" false;               return; fi 
	mkdir -p $(dirname "$TARGET_FILE")
	if ! $(f_is_directory "$(dirname '$TARGET_FILE')"); then f_balk "$0: Target directory not found: $1" false;               return; fi 
	chown plex:plex $(dirname "$TARGET_FILE")
	chmod 775 $(dirname "$TARGET_FILE")
	mv "$SOURCE_FILE" "$TARGET_FILE"
	exit_code=$?
	if [ $exit_code -ne 0 ];										then f_balk "$0: Can't move '$SOURCE_FILE' to '$TARGET_FILE'"; return; fi
	chown plex:plex "$TARGET_FILE"
	chmod 664 "$TARGET_FILE"
	}

function f_process_ts_file () {

	IN_FILE="$1"
	WORK_ROOT_PATH="$2"
	STORE_ROOT_PATH="$3"
	OUT_EXT="m4v"

	if ! $(f_is_file "$IN_FILE");                      then f_balk "$0: TS file not found: $1" false;      return; fi 
	if ! $(f_is_directory "$WORK_ROOT_PATH");          then f_balk "$0: Work directory not found: $1" false; return; fi 
	if ! $(f_is_directory "$STORE_ROOT_PATH");         then f_balk "$0: Store directory not found: $1" false; return; fi 
	if ! $(f_variable_has_content "$IGNORE_TV_SHOWS"); then f_balk "$0: TV filter undefined" false;     return; fi

	WORK_ROOT_PATH_LENGTH=${#WORK_ROOT_PATH}

	IN_FILE_LENGTH=${#IN_FILE}
	IN_FILE_EXT="${IN_FILE##*.}"
	IN_FILE_EXT_LENGTH="${#IN_FILE_EXT}"

	RELATIVE_FILE_LENGTH=$[IN_FILE_LENGTH-WORK_ROOT_PATH_LENGTH-1]
	RELATIVE_FILE=${IN_FILE: -$RELATIVE_FILE_LENGTH} # First remove WORK_ROOT_PATH
	RELATIVE_FILE_NO_EXT_LENGTH=$[RELATIVE_FILE_LENGTH-IN_FILE_EXT_LENGTH-1] # Recalculate relative path length by removing extension length
	RELATIVE_FILE_NO_EXT=${RELATIVE_FILE:0:RELATIVE_FILE_NO_EXT_LENGTH} # Then remove IN_FILE_EXT
	OUT_FILE="$WORK_ROOT_PATH/$RELATIVE_FILE_NO_EXT.$OUT_EXT"
	STORE_FILE="$STORE_ROOT_PATH/$RELATIVE_FILE_NO_EXT.$OUT_EXT"
	STORE_FILE="$STORE_ROOT_PATH/$RELATIVE_FILE_NO_EXT.$OUT_EXT"

	if ! $(f_variable_has_content "$OUT_FILE");      then f_balk "$0: Output file undefined" false; return;   fi
	if ! $(f_variable_has_content "$RELATIVE_FILE"); then f_balk "$0: Relative file undefined" false; return; fi
	if ! $(f_variable_has_content "$STORE_FILE");    then f_balk "$0: Store file undefined" false; return;    fi
	if ! $(f_variable_has_content "$PLEX_LIVE_APPLICATION_SUPPORT"); then 
		f_balk "$0: Plex live application support directory undefined" false; return; fi

	if ! $(f_filter "$IN_FILE" "$IGNORE_TV_SHOWS"); then
		
		# Hold this part out for now. Not sure this is the place for it.
		# "${PATHNAME[transcode_ripped_dvds]}" # Pick up ripped DVDs first, if any

		# Do the transcoding
		TIMESTART=$(currenttimeinseconds)
		IN_FILE_BASE=$(basename "$IN_FILE")
		f_log_and_echo "$0: Transcoding $IN_FILE" false
		nice "$HANDBRAKE_CLI" --preset-import-file "$HANDBRAKE_PRESETS" -i "$IN_FILE" -o "$OUT_FILE"
		exit_status=$?
		chown plex:plex "$OUT_FILE"
		chmod 664 "$OUT_FILE"
		if [ $exit_status -ne 0 ]; then # If the transcoding failed ...
				f_balk "$HANDBRAKE_CLI: FAILED with $exit_status for $IN_FILE" true
			else
				rm "$IN_FILE" # Delete input file
				f_log_and_echo "$0: Transcoding complete in $(timeformat $(( $(currenttimeinseconds) - TIMESTART )))" false
			fi # End of check for transcoding failure
		# Move all .m4v files from $VIDEO_WORK_DIRECTORY to $VIDEO_STORE_DIRECTORY.
			find "$VIDEO_WORK_DIRECTORY" -type f -name "*.m4v" | while read M4V_FILE; do f_move_one_plex_file "$M4V_FILE" "$VIDEO_STORE_DIRECTORY/$M4V_FILE"; done
		echo "Sleeping 120 for diagnostics (so you can read any error messages that may appear above)."
		f_beep
		sleep 120
		fi
	}




#########################################################################################################

# Log the completion
if [ ! $DEBUG_MODE ]; then
	logger $0: Functions loaded from _functions
	fi

