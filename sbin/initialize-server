#!/bin/bash
# initialize-server
# PURPOSE: Installs basic software, initializes, and configures
# OPTIMIZED for Ubuntu Server 22.04 LTS
# IMPORTANT: Check variables at the top of the script before running it!
# Instructions for creating a custom ISO installation are at https://linuxhint.com/customize_ubuntu_iso_create_spin/

# Make sure we're root.
if [[ $EUID -ne 0 ]]; then
        echo "Use sudo. $0 must be run as root." 1>&2
        exit 1
    fi

# If this is set to false, GUI app installations will be ignored.
# CAUTION: If accidentally set to true, all required GUI packages also will be installed.
is_desktop=false

# Used for installing git
my_full_name="Lane Hensley"
my_email="lane@lanehensley.org"

# Which optional software to install
install_apache2=true        # Apache 2 Webserver
install_certbot=true        # Certificate Installer for https
install_chrome=true         # Google Chrome web browser
install_cubic=true          # Creates custom Ubuntu ISO files. Details at https://github.com/PJ-Singh-001/Cubic
install_handbrake=true      # HandBrake video rendering
install_lsyncd=true         # Keeps directories in sync using inotify or fsevents. Details at https://lsyncd.github.io/lsyncd/
install_mailutils=true      # mail, Postfix, etc.
install_makemkv=true        # MakeMKV DVD ripper
install_openssl=true        # OpenSSL
# install_php=true            # PHP - IS THIS ALREADY IN THE OS? DROP?
install_rclone=true         # command-line program to manage files on cloud storage. Details at https://rclone.org/
install_webmin=true         # Web-based system admin tools
install_zoom=true           # Video conferencing

# Confirm that this is what the user wants
	echo -en "\007" # Beep
	echo
	echo "CAUTION CAUTION CAUTION"
	echo
	echo "This will install basic software packages and open IP ports as needed."
	read -p "To continue, type the word Install (case sensitive) and press <ENTER>.  " ANSWER
	echo
	if [ "$ANSWER" != "Install" ]; then
		echo $0: ABORT from user.
		exit 1
		fi

# Add universe (and multiverse?) repository
# More into is at https://itsfoss.com/ubuntu-repositories/
    add-apt-repository -y universe
    # add-apt-repository -y multiverse     # OK to uncomment if needed, but if not, why have it?
    apt update

# Update packages
    # "update" downloads package information from all configured sources
    apt -y update
    # "upgrade" is an extraneous subset of "dist-upgrade" below
    #    sudo apt -y upgrade \
    # "dist-upgrade" installs available upgrades of all packages
    # currently installed on the system and intelligently handles
    # changing dependencies with new versions of packages
    apt -y dist-upgrade
    # "clean" clears out the local repository of retrieved package files.
    apt -y clean
    # "autoremove" removes those dependencies that were installed with
    # now-removed applications and that are no longer used
    # by anything else on the system
    apt -y autoremove

# Install git and ufw and open the git port
    DEBIAN_FRONTEND=noninteractive apt-get install -yq git
    ufw allow git

# Configure git
    cd
    git config --global user.name "$my_full_name"
    git config --global user.email "$my_email"
    git config --global credential.helper store
    git config --global credential.helper cache
    git config --global credential.helper 'cache --timeout=600'
    # Install git token
    # To get a new token, go to https://github.com/settings/tokens.
    # NOTE: this token allows deployment only.
    MY_GIT_TOKEN=8224e3fbc597bf523d30906d038158977763b2e1
    git config --global url."https://api:$MY_GIT_TOKEN@github.com/".insteadOf "https://github.com/"
    git config --global url."https://ssh:$MY_GIT_TOKEN@github.com/".insteadOf "ssh://git@github.com/"
    git config --global url."https://git:$MY_GIT_TOKEN@github.com/".insteadOf "git@github.com:"
    chown $ROOT_USER:$ROOT_USER $ROOT_HOME_DIR/.gitconfig
    chmod 600 /root/.gitconfig

# Wipe out existing git and /usr/local/sbin if they exist
    rm -rf /var/local/git /usr/local/sbin

# Clone go.git and set restrictive permissions
    mkdir -p /var/local/git
    chmod 775 /var/local/git
    cd /var/local/git
    git clone https://github.com/lhensley/go.git
    chown -R root:root /var/local/git
    chmod -R 400 /var/local/git
    cd

# Copy scripts into /usr/local/sbin
    cp -r /var/local/git/go/sbin /usr/local
    chown -R root:root /usr/local/sbin
    find /usr/local/sbin -type d -print0 | sudo xargs -0 chmod 750
    find /usr/local/sbin -type f -print0 | sudo xargs -0 chmod 540




############################### STOP HERE
exit 0





# Include script setup file
	source script-setup
	if [ ! $FUNCTIONS_ARE_DEFINED ]; then echo $0: Functions not defined. Aborting; logger $0: Functions not defined. Aborting; exit 1; fi
	if [ ! $VARIABLES_ARE_DEFINED ]; then echo $0: Variables not defined. Aborting; logger $0: Variables not defined. Aborting; exit 1; fi

# Install cubic
if $is_desktop ; then
    if $install_cubic ; then
        apt-add-repository ppa:cubic-wizard/release
        apt update
        apt install -y cubic
        fi
    fi

# The machine (or at least oz) will brick without these drivers.
# Next time a new ISO is generated, this section should be removed from initialize-server because its also in the configure-installer script.
if $is_desktop ; then
    apt-get -y install nvidia-driver-390
    fi

# Install MakeMKV
# DON'T USE THE SNAP INSTALLER
if $is_desktop ; then
    if $install_makemkv ; then
      echo "Installing MakeMKV"
      printf '\n\n' | add-apt-repository ppa:heyarje/makemkv-beta
      apt-get update
      DEBIAN_FRONTEND=noninteractive apt-get install -yq makemkv-bin makemkv-oss ccextractor
      echo "MakeMKV installed."
      fi
    fi

# Install uncomplicated, no-down-side utilities (review this assumption from time to time)
    f_install at
    f_install apg                     # Password generator 
    f_install cryfs                   # Encrypted file system
    f_install comskip                 # Commercial skipper for videos
    f_install curl
    f_install ddclient
    f_install dos2unix
    f_install exiftool
    f_install fail2ban
    f_install ffmpeg
    f_install ghostscript             # Compressing PDF scans
    f_install git && ufw allow git
    f_install gpg
    f_install gzip
    f_install inotify-tools           # Do something when a file is created, deleted, or changed
    f_install net-tools
    f_install openvpn
    f_install bridge-utils
    # f_install ifupdown              # Used for /etc/network/interfaces manual configuration; interferes with Network Manager
    # f_install proftpd                 # For scanning to brother@oz
    f_install putty-tools
    f_install resolvconf
    f_install rsync
    f_install ripmime                 # Process files sent by email
    f_install ssh && ufw allow ssh
    f_install sshfs
    f_install sysbench
    f_install tasksel
    f_install unzip
    # f_install uuid                  # Use uuidgen instead. It's built-in.
    f_install vim
    # f_install wget                    # Unnecesary; already installed with OS.
    if $is_desktop ; then
        f_install filezilla
        f_install gimp
        f_install xrdp
        # Microsoft Edge - Based on https://www.linuxcapable.com/how-to-install-microsoft-edge-on-ubuntu-22-04-lts/
            apt install software-properties-common apt-transport-https curl wget ca-certificates -y
            wget -O- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor | tee /usr/share/keyrings/microsoft-edge.gpg
            echo 'deb [signed-by=/usr/share/keyrings/microsoft-edge.gpg] https://packages.microsoft.com/repos/edge stable main' | tee /etc/apt/sources.list.d/microsoft-edge.list
            apt update
            apt install microsoft-edge-stable -y
        fi

if $install_apache2 ; then
  echo "Installing apache2"
  DEBIAN_FRONTEND=noninteractive apt-get install -yq apache2 apache2-doc apache2-suexec-pristine
  ufw allow 'Apache'
  ufw allow 'Apache Full'
  ufw allow http
  ufw allow https
  a2enmod ssl rewrite
  systemctl restart apache2
  echo "apache2 installed."
  fi

# Install Google Chrome
    if $is_desktop ; then
        DEBIAN_FRONTEND=noninteractive apt-get install -yq wget gdebi-core
        wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
        gdebi --n google-chrome-stable_current_amd64.deb
        rm ./google-chrome-stable_current_amd64.deb
        fi

if $install_openssl ; then
  echo "Installing openssl"
  OPENSSL_PACKAGES="openssl libcurl4-openssl-dev libssl-dev libcurl4-doc"
  OPENSSL_PACKAGES+=" libidn11-dev libkrb5-dev libldap2-dev "
  OPENSSL_PACKAGES+=" librtmp-dev libssh2-1-dev zlib1g-dev libssl-doc"
  DEBIAN_FRONTEND=noninteractive apt-get install -yq $OPENSSL_PACKAGES 
  echo "openssl installed."
  fi

if $install_php ; then
  echo "Installing php"
  PHP_PACKAGES="php libapache2-mod-php php-mysql php-gd php-curl php-imap php-ldap"
  PHP_PACKAGES+=" libmcrypt-dev php-mbstring php-dev php-pear"
  PHP_PACKAGES+=" libc-client2007e mlock php-curl php-imap uw-mailutils"
  DEBIAN_FRONTEND=noninteractive apt-get install -yq $PHP_PACKAGES
  phpenmod gd curl imap ldap mbstring
  systemctl restart apache2
  echo "php installed."
  fi

# Install rclone
    echo "Installing rclone"
    DEBIAN_FRONTEND=noninteractive apt-get install -yq curl
    curl https://rclone.org/install.sh | sudo bash

if $install_certbot ; then
  echo "Installing certbot"
  DEBIAN_FRONTEND=noninteractive apt-get install -yq certbot python3-certbot-apache
  echo "certbot installed."
  fi

if $install_mailutils ; then
  echo "installing mailutils"
  debconf-set-selections <<< "postfix postfix/relayhost $RELAYHOST"
  debconf-set-selections <<< "postfix postfix/mailname string $MAILNAME@$DOMAIN_NAME"
  debconf-set-selections <<< "postfix postfix/main_mailer_type string $MAIN_MAILER_TYPE"
  apt-get install -y mailutils postfix
  ufw allow mail
  echo "mailutils installed."
  fi
  
if $install_webmin ; then
  echo "Installing Webmin"
  wget http://www.webmin.com/download/deb/webmin-current.deb
  WEBMIN_PACKAGES="openssl libcurl4-openssl-dev libssl-dev perl libnet-ssleay-perl libauthen-pam-perl"
  WEBMIN_PACKAGES+=" libnet-ssleay-perl libauthen-pam-perl libpam-runtime"
  WEBMIN_PACKAGES+=" libio-pty-perl apt-show-versions python libsocket6-perl"
  DEBIAN_FRONTEND=noninteractive apt-get install -yq $WEBMIN_PACKAGES
  dpkg --install webmin-current.deb
  rm webmin-current.deb
  ufw allow webmin
  echo "Webmin installed."
  fi

# Install Zoom Client
  if $is_desktop ; then
    if $install_zoom ; then
      echo "Installing Zoom Client"
      wget https://zoom.us/client/latest/zoom_amd64.deb
      DEBIAN_FRONTEND=noninteractive apt-get install -yq ./zoom_amd64.deb
      rm ./zoom_amd64.deb
      echo "Zoom Client installed."
      fi
    fi

# Install Google Chrome
  if $is_desktop ; then
    if $install_chrome ; then
      echo "Installing Google Chrome"
      DEBIAN_FRONTEND=noninteractive apt-get install -yq gdebi-core
      wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
      gdebi --n google-chrome-stable_current_amd64.deb
      rm ./google-chrome-stable_current_amd64.deb
      echo "Google Chrome installed."
      fi
    fi

# Install lsyncd
if $install_lsyncd ; then
  echo "Installing lsyncd"
  DEBIAN_FRONTEND=noninteractive apt-get install -yq lsyncd
  mkdir -p /etc/lsyncd
  mkdir -p /var/log/lsyncd
  systemctl start lsyncd
  systemctl enable lsyncd
  echo "lsyncd installed."
  fi

if $install_handbrake ; then
  echo "Installing HandBrake"
  add-apt-repository -y ppa:stebbins/handbrake-releases
  apt-get update
  DEBIAN_FRONTEND=noninteractive apt-get install -yq handbrake-gtk handbrake-cli
  echo "HandBrake installed."
  echo "GUI version is NOT configured: "
  echo "  Presets ($ADMIN_HOME_DIR/.HandBrake/*) need to be added."
  fi

# Ref: https://askubuntu.com/questions/1058750/new-alert-keeps-showing-up-server-returned-error-nxdomain-mitigating-potential
# This corrects a problem in which you'll get constant syslog errors:
#    Server returned error NXDOMAIN, mitigating potential DNS violation DVE-2018-0001, retrying transaction with reduced feature level UDP.
# If this causes trouble, you can restore the original link with
#    sudo ln -sf ../run/resolvconf/resolv.conf /etc/resolv.conf
ln -sf /run/systemd/resolve/resolv.conf /etc/resolv.conf

# Download for later but don't yet install
    apt-get install -y --download-only ssh mysql-server openssl libcurl4-openssl-dev libssl-dev php-gmp php-symfony-service-implementation 
    apt-get install -y --download-only php-imagick php-twig-doc php-symfony-translation phpmyadmin php-mbstring php-zip php-gd php-json php-curl

set +x

exit 0

















# Include script setup file
	source script-setup
	if [ ! $FUNCTIONS_ARE_DEFINED ]; then echo $0: Functions not defined. Aborting; logger $0: Functions not defined. Aborting; exit 1; fi
	if [ ! $VARIABLES_ARE_DEFINED ]; then echo $0: Variables not defined. Aborting; logger $0: Variables not defined. Aborting; exit 1; fi

# Require a specific OS environment
	f_require_ubuntu
    f_require_minimum_version_number 20
	f_require_root

install_dos2unix=true
install_mysql_server=true
install_phpmyadmin=true
install_plexmediaserver=true
install_tautulli=true
install_apt_cacher_ng=true

# Copy git configs to $ADMIN_USER
if [ -f "$ROOT_HOME_DIR/.gitconfig" ]; then
    cp $ROOT_HOME_DIR/.gitconfig $ADMIN_HOME_DIR/.gitconfig
    chown $ADMIN_USER:$ADMIN_USER $ADMIN_HOME_DIR/.gitconfig
    chmod 600 $ADMIN_HOME_DIR/.gitconfig
    fi

# Do updates
    upd

# Remote everything in this section after the next installer is configured.
    f_install sshfs # sshfs, added 2020-10-11

# Add peripherals to /etc/fstab
    for KEY in "${!MOUNT_POINT_DEFINITION[@]}"; do 
        mkdir -p "$KEY"
        if [ ! -z "${MOUNT_POINT_DEFINITION["$KEY"]}" ] || [ ! -z "${MOUNT_POINT_DEFINITION["$KEY"]}" ]; then
            echo "" >> /etc/fstab
        fi
        if [ ! -z "${MOUNT_POINT_DESCRIPTION["$KEY"]}" ]; then
            echo "# ${MOUNT_POINT_DESCRIPTION["$KEY"]}" >> /etc/fstab
        fi
        if [ ! -z "${MOUNT_POINT_DEFINITION["$KEY"]}" ]; then
            echo "${MOUNT_POINT_DEFINITION["$KEY"]}" >> /etc/fstab
        fi
        if [ ! -z "${MOUNT_POINT_DEFINITION["$KEY"]}" ] || [ ! -z "${MOUNT_POINT_DEFINITION["$KEY"]}" ]; then
            echo "" >> /etc/fstab
        fi
    done

# Unmount peripherals currently mounted under /media/$LOGNAME/*
    umount "/media/$LOGNAME/"*

# Remount all using /etc/fstab, as amended above
    mount --all

if $install_dos2unix ; then
    finstall dos2unix
    fi

if $install_plexmediaserver ; then
    # Tested through Ubuntu 20.04.1
    # Install Plex Media Server
      echo "Installing Plex Media Server"
      rm -rf /etc/apt/sources.list.d/plexmediaserver.list
      echo "# When enabling this repo please remember to add the PlexPublic.Key into the apt setup." > /etc/apt/sources.list.d/plexmediaserver.list
      echo "# wget -q https://downloads.plex.tv/plex-keys/PlexSign.key -O - | sudo apt-key add -" >> /etc/apt/sources.list.d/plexmediaserver.list >> /etc/apt/sources.list.d/plexmediaserver.list
      echo "#" >> /etc/apt/sources.list.d/plexmediaserver.list >> /etc/apt/sources.list.d/plexmediaserver.list
      echo "deb https://downloads.plex.tv/repo/deb/ public main" >> /etc/apt/sources.list.d/plexmediaserver.list >> /etc/apt/sources.list.d/plexmediaserver.list
      wget -q https://downloads.plex.tv/plex-keys/PlexSign.key -O - | sudo apt-key add -
      apt-get -y update
      apt-get install --reinstall -o Dpkg::Options::="--force-confold" plexmediaserver
      f_install plexmediaserver
      ufw allow 32400/tcp # if not already specified
      echo "Plex Media Server installed."
    if $install_tautulli ; then
        # Install Tautulli for https://this-server:8181
        # Ref: https://tautulli.com/
            DEBIAN_FRONTEND=noninteractive apt-get install -yq python python-setuptools tzdata
            cd /opt
            git clone https://github.com/Tautulli/Tautulli.git
            addgroup tautulli && sudo adduser --system --no-create-home tautulli --ingroup tautulli
            cp /opt/Tautulli/init-scripts/init.systemd /lib/systemd/system/tautulli.service
            chown tautulli:tautulli -R /opt/Tautulli
            systemctl daemon-reload
            systemctl enable tautulli.service
            systemctl start tautulli.service
            ufw allow 8181
            cd
        fi
  fi

# Configure MakeMKV
  usermod -a -G cdrom $ADMIN_USER
  # MakeMKV config file
    if [ -f $GIT_GO_CONFIGS/makemkv/settings.conf ]; then
	    mkdir -p $ADMIN_HOME_DIR/.MakeMKV
	    mkdir -p $ROOT_HOME_DIR/.MakeMKV
	    cp $GIT_GO_CONFIGS/makemkv/settings.conf $ADMIN_HOME_DIR/.MakeMKV/
	    chmod 600 $ADMIN_HOME_DIR/.MakeMKV/settings.conf
	    chown -R $ADMIN_USER:$ADMIN_USER $ADMIN_HOME_DIR/.MakeMKV
	    cp $ADMIN_HOME_DIR/.MakeMKV/settings.conf $ROOT_HOME_DIR/.MakeMKV/
	    chown -R $ROOT_USER:$ROOT_USER $ROOT_HOME_DIR/.MakeMKV
	    fi

# Generate passwords
    NUMBER_OF_DESIGNATED_PASSWORDS=7
    TEMP_PASSWORD_INCLUDE="/tmp/passwords"
    echo "" > $TEMP_PASSWORD_INCLUDE
    echo "PASSWORD_ME=\"$(apg -c cl_seed -a 1 -m $LENGTH_OF_PASSWORDS -n 1 -E $EXCLUDED_PASSWORD_CHARACTERS)\"" >> $TEMP_PASSWORD_INCLUDE
    # echo "PASSWORD_UBUNTU=\"$(apg -c cl_seed -a 1 -m $LENGTH_OF_PASSWORDS -n 1 -E $EXCLUDED_PASSWORD_CHARACTERS)\"" >> $TEMP_PASSWORD_INCLUDE
    echo "MYSQL_ROOT_PASSWORD=\"$(apg -c cl_seed -a 1 -m $MAX_MYSQL_PASSWORD_LENGTH -n 1 -E $EXCLUDED_PASSWORD_CHARACTERS)\"" >> $TEMP_PASSWORD_INCLUDE
    echo "MYSQL_ADMIN_PASSWORD=\"$(apg -c cl_seed -a 1 -m $MAX_MYSQL_PASSWORD_LENGTH -n 1 -E $EXCLUDED_PASSWORD_CHARACTERS)\"" >> $TEMP_PASSWORD_INCLUDE
    echo "PHPMYADMIN_APP_PASS=\"$(apg -c cl_seed -a 1 -m $LENGTH_OF_PASSWORDS -n 1 -E $EXCLUDED_PASSWORD_CHARACTERS)\"" >> $TEMP_PASSWORD_INCLUDE
    echo "PHPMYADMIN_ROOT_PASS=\"$(apg -c cl_seed -a 1 -m $LENGTH_OF_PASSWORDS -n 1 -E $EXCLUDED_PASSWORD_CHARACTERS)\"" >> $TEMP_PASSWORD_INCLUDE
    echo "PHPMYADMIN_APP_DB_PASS=\"$(apg -c cl_seed -a 1 -m $LENGTH_OF_PASSWORDS -n 1 -E $EXCLUDED_PASSWORD_CHARACTERS)\"" >> $TEMP_PASSWORD_INCLUDE
    echo "" >> $TEMP_PASSWORD_INCLUDE
    chown $ROOT_USER:$ROOT_USER $TEMP_PASSWORD_INCLUDE
    chmod 500 $TEMP_PASSWORD_INCLUDE
    source $TEMP_PASSWORD_INCLUDE

# Update hostname
    echo "Updating hostname"
    hostnamectl set-hostname $HOSTNAME
    echo $HOSTNAME > /etc/hostname
    chmod 644 /etc/hostname
    chown $ROOT_USER:$ROOT_USER /etc/hostname

# Install ssh
    apt-get update
    DEBIAN_FRONTEND=noninteractive apt-get install -yq ufw ssh
    ufw allow ssh

# Set up $ADMIN_USER
    # Make $ADMIN_USER a member of group sudo
        usermod -aG sudo $ADMIN_USER
    # Generate SSH keys for $ADMIN_USER
    # Should this occur somewhere else? SSH setup?
        sudo -u $ADMIN_USER ssh-keygen -C "$SSH_KEY_NAME" -P "" -q -f "$ADMIN_HOME_DIR/.ssh/id_rsa"

# Configure sudo user(s)
    echo Configure sudo $ADMIN_USER as a sudo user
    echo "$ADMIN_USER ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/lane-NOPASSWD-users
    # echo "$USER_UBUNTU ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers.d/lane-NOPASSWD-users
    chmod 440 /etc/sudoers.d/lane-NOPASSWD-users

# Add custom application definitions for ufw
    echo "Adding custom application definitions for ufw"
    cp $GIT_GO_CONFIGS/lane-applications /etc/ufw/applications.d
    chown $ROOT_USER:$ROOT_USER /etc/ufw/applications.d/lane-applications
    chmod 644 /etc/ufw/applications.d/lane-applications
    ufw app update lane-applications
    echo "Special LANE applications installed to ufw."

# Patch to add automatic updates for Plex Media Server.
# Not sure what happens if PMS isn't already installed in the first place. Oh well.
# From https://forums.plex.tv/t/plex-media-server-automatic-update-ubuntu/462840
    echo deb https://downloads.plex.tv/repo/deb public main | sudo tee /etc/apt/sources.list.d/plexmediaserver.list
    curl https://downloads.plex.tv/plex-keys/PlexSign.key | sudo apt-key add -

if $install_mysql_server ; then
  echo "Installing mysql server"
###### EXTREMELY IMPORTANT: Edit /etc/mysql/mysql.conf.d/mysqld.cnf and open up bind-address * ###########
  MYSQL_PACKAGES="mysql-server openssl libcurl4-openssl-dev libssl-dev php-gmp php-symfony-service-implementation php-imagick php-twig-doc php-symfony-translation"
  DEBIAN_FRONTEND=noninteractive apt-get install -yq $MYSQL_PACKAGES
  ufw allow mysql
  mysqladmin -u root password "$MYSQL_ROOT_PASSWORD"
  mysql -u root -p"$MYSQL_ROOT_PASSWORD" -e "DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1')"
  mysql -u root -p"$MYSQL_ROOT_PASSWORD" -e "DELETE FROM mysql.user WHERE User=''"
  mysql -u root -p"$MYSQL_ROOT_PASSWORD" -e "DELETE FROM mysql.db WHERE Db='test' OR Db='test_%'"
  mysql -u root -p"$MYSQL_ROOT_PASSWORD" -e "CREATE USER '$MYSQL_ADMIN_NAME'@'localhost' IDENTIFIED WITH caching_sha2_password BY '$MYSQL_ADMIN_PASSWORD'"
  mysql -u root -p"$MYSQL_ROOT_PASSWORD" -e "GRANT ALL PRIVILEGES ON *.* TO '$MYSQL_ADMIN_NAME'@localhost WITH GRANT OPTION"
  mysql -u root -p"$MYSQL_ROOT_PASSWORD" -e "FLUSH PRIVILEGES"
  mkdir -p $MYSQL_CLIENT_CERTS_DIR
  cp "$MYSQL_SERVER_BIN_DIR/ca.pem" "$MYSQL_CLIENT_CERTS_DIR/$HOSTNAME-MySQL-ca.pem"
  cp "$MYSQL_SERVER_BIN_DIR/client-cert.pem" "$MYSQL_CLIENT_CERTS_DIR/$HOSTNAME-MySQL-client-cert.pem"
  cp "$MYSQL_SERVER_BIN_DIR/client-key.pem" "$MYSQL_CLIENT_CERTS_DIR/$HOSTNAME-MySQL-client-key.pem"
  chown -R $ADMIN_USER:$ADMIN_USER "$MYSQL_CLIENT_CERTS_DIR"
  # Install .my.cnf in home directory
    backup-file $ADMIN_HOME_DIR/.my.cnf
    cp $GIT_GO_CONFIGS/mysql/home_directory_.my.cnf $ADMIN_HOME_DIR/.my.cnf
    replace-in-file "$ADMIN_HOME_DIR/.my.cnf" "UserValue" "$MYSQL_ADMIN_NAME"
    replace-in-file "$ADMIN_HOME_DIR/.my.cnf" "PasswordValue" "$MYSQL_ADMIN_PASSWORD"
    chown $ADMIN_USER:$ADMIN_USER "$ADMIN_HOME_DIR/.my.cnf"*
    chmod 600 "$ADMIN_HOME_DIR/.my.cnf"*
  # Install .my.cnf for root user
    backup-file $ROOT_HOME_DIR/.my.cnf
    cp $GIT_GO_CONFIGS/mysql/home_directory_.my.cnf $ROOT_HOME_DIR/.my.cnf
    replace-in-file "$ROOT_HOME_DIR/.my.cnf" "UserValue" "$MYSQL_ADMIN_NAME"
    replace-in-file "$ROOT_HOME_DIR/.my.cnf" "PasswordValue" "$MYSQL_ADMIN_PASSWORD"
    chown $ROOT_USER:$ROOT_USER "$ROOT_HOME_DIR/.my.cnf"*
    chmod 600 "$ROOT_HOME_DIR/.my.cnf"*
  echo "MySQL server installed."
  fi

if $install_apt_cacher_ng ; then
  echo "Installing apt-gacher-ng"
  # Based on https://www.tecmint.com/apt-cache-server-in-ubuntu/
  apt install apt-cacher-ng avahi-daemon squid-deb-proxy-client
  echo "apt-gacher-ng installed"
  fi

# phpMyAdmin should be installed AFTER php and MySQL
if $install_phpmyadmin ; then
  echo "Installing phpMyAdmin"
  # Based on https://www.digitalocean.com/community/tutorials/how-to-install-and-secure-phpmyadmin-on-ubuntu-20-04
  debconf-set-selections <<< "phpmyadmin phpmyadmin/reconfigure-webserver multiselect apache2"
  debconf-set-selections <<< "phpmyadmin phpmyadmin/dbconfig-install boolean true"
  debconf-set-selections <<< "phpmyadmin phpmyadmin/app-password-confirm password $PHPMYADMIN_APP_PASS"
  debconf-set-selections <<< "phpmyadmin phpmyadmin/mysql/admin-pass password $PHPMYADMIN_ROOT_PASS"
  debconf-set-selections <<< "phpmyadmin phpmyadmin/mysql/app-pass password $PHPMYADMIN_APP_DB_PASS"
  apt install -y phpmyadmin php-mbstring php-zip php-gd php-json php-curl
  phpenmod mbstring
  cp $GIT_GO_CONFIGS/phpmyadmin.config.inc.php $PHPMYADMIN_DIR/config.inc.php
  chown -R www-data:www-data $PHPMYADMIN_DIR
  chmod 644 $PHPMYADMIN_DIR/config.inc.php
#  cp $GIT_GO_CONFIGS/html/.htaccess.html.www.var $THIS_WEB_ROOT/.htaccess
#  chown -R www-data:www-data $THIS_WEB_ROOT/.htaccess
#  chmod 644 $THIS_WEB_ROOT/.htaccess
  systemctl restart apache2
  echo "phpMyAdmin installed."
  fi

# Invoke /usr/local/sbin/_apply-configs
# chmod 777 $SBIN_DIR/_apply-configsHOME
    $SBIN_DIR/_apply-configs

# Update
    upd

# Report password information
    mkdir -p $(dirname $OS_INSTALL_INFO_PATH)
    echo "MYSQL_ROOT_PASSWORD: $MYSQL_ROOT_PASSWORD" > $OS_INSTALL_INFO_PATH
    echo "MYSQL_ADMIN_NAME: $MYSQL_ADMIN_NAME" >> $OS_INSTALL_INFO_PATH
    echo "MYSQL_ADMIN_PASSWORD: $MYSQL_ADMIN_PASSWORD" >> $OS_INSTALL_INFO_PATH
    echo "PHPMYADMIN_APP_PASS: $PHPMYADMIN_APP_PASS" >> $OS_INSTALL_INFO_PATH
    echo "PHPMYADMIN_ROOT_PASS: $PHPMYADMIN_ROOT_PASS" >> $OS_INSTALL_INFO_PATH
    echo "PHPMYADMIN_APP_DB_PASS: $PHPMYADMIN_APP_DB_PASS" >> $OS_INSTALL_INFO_PATH
    echo "" >> $OS_INSTALL_INFO_PATH
    echo "# Add to $GIT_GO_CONFIGS/ssh/home-.ssh-authorized_keys:" >> $OS_INSTALL_INFO_PATH
    echo "" >> $OS_INSTALL_INFO_PATH
    echo "# $SSH_KEY_NAME" >> $OS_INSTALL_INFO_PATH
    cat "$ADMIN_HOME_DIR/.ssh/id_rsa.pub" >> $OS_INSTALL_INFO_PATH
    echo "#" >> $OS_INSTALL_INFO_PATH
    chmod 400 $OS_INSTALL_INFO_PATH
    chown $ROOT_USER:$ROOT_USER $OS_INSTALL_INFO_PATH
    echo ""
    # echo "# IMPORTANT: Move the contents of $OS_INSTALL_INFO_PATH"
    # echo "#    into 1Password NOW, delete it, and reboot."
    # echo "# Once you continue, these passwords cannot be recovered."
    # echo ""
    rm $TEMP_PASSWORD_INCLUDE

# Cold Restore
    cold-restore

# Last instructions
	echo
	echo -en "\007" # Beep
    echo "Reboot using   sudo init 6"
    # echo "THEN run       sudo cold-restore"
    echo "THEN Reboot again."
    echo

# Include script footer file
	f_debug_variable "script_footer" "${PATHNAME[script_footer]}"
	source "${PATHNAME[script_footer]}"

exit 0

