#!/bin/bash
# initialize-server
# PURPOSE: Installs basic software, initializes, and configures
# IMPORTANT: Check variables at the top of the script before running it!

install_dos2unix=true
install_mysql_server=true
install_phpmyadmin=true
install_plexmediaserver=true
install_tautulli=true

# Make sure we're root.
if [[ $EUID -ne 0 ]]; then
        echo "Use sudo. $0 must be run as root." 1>&2
        exit 1
    fi

# Include script setup file
	source script-setup
	if [ ! $FUNCTIONS_ARE_DEFINED ]; then echo $0: Functions not defined. Aborting; logger $0: Functions not defined. Aborting; exit 1; fi
	if [ ! $VARIABLES_ARE_DEFINED ]; then echo $0: Variables not defined. Aborting; logger $0: Variables not defined. Aborting; exit 1; fi

if [[ $NAME = "Ubuntu" ]]; then
    if [[ $(echo $VERSION_ID | cut -c1-3) = "20." ]]; then
      echo "Ubuntu version 20 confirmed."
    else
      echo "This script does not support version $VERSION_ID of Ubuntu."
      exit 1
    fi
else
  echo "This script works only on Ubuntu."
  exit 1
fi

# set -x

# Copy git configs to $ADMIN_USER
if [ -f "$ROOT_HOME_DIR/.gitconfig" ]; then
    cp $ROOT_HOME_DIR/.gitconfig $ADMIN_HOME_DIR/.gitconfig
    chown $ADMIN_USER:$ADMIN_USER $ADMIN_HOME_DIR/.gitconfig
    chmod 600 $ADMIN_HOME_DIR/.gitconfig
    fi

# Do updates
    upd

# Remote everything in this section after the next installer is configured.
    f_install sshfs # sshfs, added 2020-10-11

# Add peripherals to /etc/fstab
    for KEY in "${!MOUNT_POINT_DEFINITION[@]}"; do 
        mkdir -p "/mnt/$KEY"
        if [ ! -z "${MOUNT_POINT_DEFINITION["$KEY"]}" ] || [ ! -z "${MOUNT_POINT_DEFINITION["$KEY"]}" ]; then
            echo "" >> /etc/fstab
        fi
        if [ ! -z "${MOUNT_POINT_DESCRIPTION["$KEY"]}" ]; then
            echo "# ${MOUNT_POINT_DESCRIPTION["$KEY"]}" >> /etc/fstab
        fi
        if [ ! -z "${MOUNT_POINT_DEFINITION["$KEY"]}" ]; then
            echo "${MOUNT_POINT_DEFINITION["$KEY"]}" >> /etc/fstab
        fi
        if [ ! -z "${MOUNT_POINT_DEFINITION["$KEY"]}" ] || [ ! -z "${MOUNT_POINT_DEFINITION["$KEY"]}" ]; then
            echo "" >> /etc/fstab
        fi
    done

# Unmount peripherals currently mounted under /media/$LOGNAME/*
    umount "/media/$LOGNAME/"*

# Remount all using /etc/fstab, as amended above
    mount --all

if $install_dos2unix ; then
    finstall dos2unix
    fi

if $install_plexmediaserver ; then
    # Tested through Ubuntu 20.04.1
    # Install Plex Media Server
      echo "Installing Plex Media Server"
      rm -rf /etc/apt/sources.list.d/plexmediaserver.list
      echo "# When enabling this repo please remember to add the PlexPublic.Key into the apt setup." > /etc/apt/sources.list.d/plexmediaserver.list
      echo "# wget -q https://downloads.plex.tv/plex-keys/PlexSign.key -O - | sudo apt-key add -" >> /etc/apt/sources.list.d/plexmediaserver.list >> /etc/apt/sources.list.d/plexmediaserver.list
      echo "#" >> /etc/apt/sources.list.d/plexmediaserver.list >> /etc/apt/sources.list.d/plexmediaserver.list
      echo "deb https://downloads.plex.tv/repo/deb/ public main" >> /etc/apt/sources.list.d/plexmediaserver.list >> /etc/apt/sources.list.d/plexmediaserver.list
      wget -q https://downloads.plex.tv/plex-keys/PlexSign.key -O - | sudo apt-key add -
      apt-get -y update
      apt-get install --reinstall -o Dpkg::Options::="--force-confold" plexmediaserver
      f_install plexmediaserver
      ufw allow 32400/tcp # if not already specified
      echo "Plex Media Server installed."
    if $install_tautulli ; then
        # Install Tautulli for https://this-server:8181
        # Ref: https://tautulli.com/
            DEBIAN_FRONTEND=noninteractive apt-get install -yq python python-setuptools tzdata
            cd /opt
            git clone https://github.com/Tautulli/Tautulli.git
            addgroup tautulli && sudo adduser --system --no-create-home tautulli --ingroup tautulli
            cp /opt/Tautulli/init-scripts/init.systemd /lib/systemd/system/tautulli.service
            chown tautulli:tautulli -R /opt/Tautulli
            systemctl daemon-reload
            systemctl enable tautulli.service
            systemctl start tautulli.service
            ufw allow 8181
            cd
        fi
  fi

# Configure MakeMKV
  usermod -a -G cdrom $ADMIN_USER
  # MakeMKV config file
    if [ -f $GIT_GO_CONFIGS/makemkv/settings.conf ]; then
	    mkdir -p $ADMIN_HOME_DIR/.MakeMKV
	    mkdir -p $ROOT_HOME_DIR/.MakeMKV
	    cp $GIT_GO_CONFIGS/makemkv/settings.conf $ADMIN_HOME_DIR/.MakeMKV/
	    chmod 600 $ADMIN_HOME_DIR/.MakeMKV/settings.conf
	    chown -R $ADMIN_USER:$ADMIN_USER $ADMIN_HOME_DIR/.MakeMKV
	    cp $ADMIN_HOME_DIR/.MakeMKV/settings.conf $ROOT_HOME_DIR/.MakeMKV/
	    chown -R $ROOT_USER:$ROOT_USER $ROOT_HOME_DIR/.MakeMKV
	    fi

# Generate passwords
    NUMBER_OF_DESIGNATED_PASSWORDS=7
    TEMP_PASSWORD_INCLUDE="/tmp/passwords"
    echo "" > $TEMP_PASSWORD_INCLUDE
    echo "PASSWORD_ME=\"$(apg -c cl_seed -a 1 -m $LENGTH_OF_PASSWORDS -n 1 -E $EXCLUDED_PASSWORD_CHARACTERS)\"" >> $TEMP_PASSWORD_INCLUDE
    # echo "PASSWORD_UBUNTU=\"$(apg -c cl_seed -a 1 -m $LENGTH_OF_PASSWORDS -n 1 -E $EXCLUDED_PASSWORD_CHARACTERS)\"" >> $TEMP_PASSWORD_INCLUDE
    echo "MYSQL_ROOT_PASSWORD=\"$(apg -c cl_seed -a 1 -m $MAX_MYSQL_PASSWORD_LENGTH -n 1 -E $EXCLUDED_PASSWORD_CHARACTERS)\"" >> $TEMP_PASSWORD_INCLUDE
    echo "MYSQL_ADMIN_PASSWORD=\"$(apg -c cl_seed -a 1 -m $MAX_MYSQL_PASSWORD_LENGTH -n 1 -E $EXCLUDED_PASSWORD_CHARACTERS)\"" >> $TEMP_PASSWORD_INCLUDE
    echo "PHPMYADMIN_APP_PASS=\"$(apg -c cl_seed -a 1 -m $LENGTH_OF_PASSWORDS -n 1 -E $EXCLUDED_PASSWORD_CHARACTERS)\"" >> $TEMP_PASSWORD_INCLUDE
    echo "PHPMYADMIN_ROOT_PASS=\"$(apg -c cl_seed -a 1 -m $LENGTH_OF_PASSWORDS -n 1 -E $EXCLUDED_PASSWORD_CHARACTERS)\"" >> $TEMP_PASSWORD_INCLUDE
    echo "PHPMYADMIN_APP_DB_PASS=\"$(apg -c cl_seed -a 1 -m $LENGTH_OF_PASSWORDS -n 1 -E $EXCLUDED_PASSWORD_CHARACTERS)\"" >> $TEMP_PASSWORD_INCLUDE
    echo "" >> $TEMP_PASSWORD_INCLUDE
    chown $ROOT_USER:$ROOT_USER $TEMP_PASSWORD_INCLUDE
    chmod 500 $TEMP_PASSWORD_INCLUDE
    source $TEMP_PASSWORD_INCLUDE

# Update hostname
    echo "Updating hostname"
    hostnamectl set-hostname $HOSTNAME
    echo $HOSTNAME > /etc/hostname
    chmod 644 /etc/hostname
    chown $ROOT_USER:$ROOT_USER /etc/hostname

# Install ssh
    apt-get update
    DEBIAN_FRONTEND=noninteractive apt-get install -yq ufw ssh
    ufw allow ssh

# Set up $ADMIN_USER
    # Make $ADMIN_USER a member of group sudo
        usermod -aG sudo $ADMIN_USER
    # Generate SSH keys for $ADMIN_USER
    # Should this occur somewhere else? SSH setup?
        sudo -u $ADMIN_USER ssh-keygen -C "$SSH_KEY_NAME" -P "" -q -f "$ADMIN_HOME_DIR/.ssh/id_rsa"

# Configure sudo user(s)
    echo Configure sudo $ADMIN_USER as a sudo user
    echo "$ADMIN_USER ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/lane-NOPASSWD-users
    # echo "$USER_UBUNTU ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers.d/lane-NOPASSWD-users
    chmod 440 /etc/sudoers.d/lane-NOPASSWD-users

# Add custom application definitions for ufw
    echo "Adding custom application definitions for ufw"
    cp $GIT_GO_CONFIGS/lane-applications /etc/ufw/applications.d
    chown $ROOT_USER:$ROOT_USER /etc/ufw/applications.d/lane-applications
    chmod 644 /etc/ufw/applications.d/lane-applications
    ufw app update lane-applications
    echo "Special LANE applications installed to ufw."

if $install_mysql_server ; then
  echo "Installing mysql server"
###### EXTREMELY IMPORTANT: Edit /etc/mysql/mysql.conf.d/mysqld.cnf and open up bind-address * ###########
  MYSQL_PACKAGES="mysql-server openssl libcurl4-openssl-dev libssl-dev php-gmp php-symfony-service-implementation php-imagick php-twig-doc php-symfony-translation"
  DEBIAN_FRONTEND=noninteractive apt-get install -yq $MYSQL_PACKAGES
  ufw allow mysql
  mysqladmin -u root password "$MYSQL_ROOT_PASSWORD"
  mysql -u root -p"$MYSQL_ROOT_PASSWORD" -e "DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1')"
  mysql -u root -p"$MYSQL_ROOT_PASSWORD" -e "DELETE FROM mysql.user WHERE User=''"
  mysql -u root -p"$MYSQL_ROOT_PASSWORD" -e "DELETE FROM mysql.db WHERE Db='test' OR Db='test_%'"
  mysql -u root -p"$MYSQL_ROOT_PASSWORD" -e "CREATE USER '$MYSQL_ADMIN_NAME'@'localhost' IDENTIFIED WITH caching_sha2_password BY '$MYSQL_ADMIN_PASSWORD'"
  mysql -u root -p"$MYSQL_ROOT_PASSWORD" -e "GRANT ALL PRIVILEGES ON *.* TO '$MYSQL_ADMIN_NAME'@localhost WITH GRANT OPTION"
  mysql -u root -p"$MYSQL_ROOT_PASSWORD" -e "FLUSH PRIVILEGES"
  mkdir -p $MYSQL_CLIENT_CERTS_DIR
  cp "$MYSQL_SERVER_BIN_DIR/ca.pem" "$MYSQL_CLIENT_CERTS_DIR/$HOSTNAME-MySQL-ca.pem"
  cp "$MYSQL_SERVER_BIN_DIR/client-cert.pem" "$MYSQL_CLIENT_CERTS_DIR/$HOSTNAME-MySQL-client-cert.pem"
  cp "$MYSQL_SERVER_BIN_DIR/client-key.pem" "$MYSQL_CLIENT_CERTS_DIR/$HOSTNAME-MySQL-client-key.pem"
  chown -R $ADMIN_USER:$ADMIN_USER "$MYSQL_CLIENT_CERTS_DIR"
  # Install .my.cnf in home directory
    backup-file $ADMIN_HOME_DIR/.my.cnf
    cp $GIT_GO_CONFIGS/mysql/home_directory_.my.cnf $ADMIN_HOME_DIR/.my.cnf
    replace-in-file "$ADMIN_HOME_DIR/.my.cnf" "UserValue" "$MYSQL_ADMIN_NAME"
    replace-in-file "$ADMIN_HOME_DIR/.my.cnf" "PasswordValue" "$MYSQL_ADMIN_PASSWORD"
    chown $ADMIN_USER:$ADMIN_USER "$ADMIN_HOME_DIR/.my.cnf"*
    chmod 600 "$ADMIN_HOME_DIR/.my.cnf"*
  # Install .my.cnf for root user
    backup-file $ROOT_HOME_DIR/.my.cnf
    cp $GIT_GO_CONFIGS/mysql/home_directory_.my.cnf $ROOT_HOME_DIR/.my.cnf
    replace-in-file "$ROOT_HOME_DIR/.my.cnf" "UserValue" "$MYSQL_ADMIN_NAME"
    replace-in-file "$ROOT_HOME_DIR/.my.cnf" "PasswordValue" "$MYSQL_ADMIN_PASSWORD"
    chown $ROOT_USER:$ROOT_USER "$ROOT_HOME_DIR/.my.cnf"*
    chmod 600 "$ROOT_HOME_DIR/.my.cnf"*
  echo "MySQL server installed."
  fi

# phpMyAdmin should be installed AFTER php and MySQL
if $install_phpmyadmin ; then
  echo "Installing phpMyAdmin"
  # Based on https://www.digitalocean.com/community/tutorials/how-to-install-and-secure-phpmyadmin-on-ubuntu-20-04
  debconf-set-selections <<< "phpmyadmin phpmyadmin/reconfigure-webserver multiselect apache2"
  debconf-set-selections <<< "phpmyadmin phpmyadmin/dbconfig-install boolean true"
  debconf-set-selections <<< "phpmyadmin phpmyadmin/app-password-confirm password $PHPMYADMIN_APP_PASS"
  debconf-set-selections <<< "phpmyadmin phpmyadmin/mysql/admin-pass password $PHPMYADMIN_ROOT_PASS"
  debconf-set-selections <<< "phpmyadmin phpmyadmin/mysql/app-pass password $PHPMYADMIN_APP_DB_PASS"
  apt install -y phpmyadmin php-mbstring php-zip php-gd php-json php-curl
  phpenmod mbstring
  cp $GIT_GO_CONFIGS/phpmyadmin.config.inc.php $PHPMYADMIN_DIR/config.inc.php
  chown -R www-data:www-data $PHPMYADMIN_DIR
  chmod 644 $PHPMYADMIN_DIR/config.inc.php
#  cp $GIT_GO_CONFIGS/html/.htaccess.html.www.var $THIS_WEB_ROOT/.htaccess
#  chown -R www-data:www-data $THIS_WEB_ROOT/.htaccess
#  chmod 644 $THIS_WEB_ROOT/.htaccess
  systemctl restart apache2
  echo "phpMyAdmin installed."
  fi

# Invoke /usr/local/sbin/_apply-configs
# chmod 777 $SBIN_DIR/_apply-configsHOME
    $SBIN_DIR/_apply-configs

# Update
    upd

# Report password information
    mkdir -p $(dirname $OS_INSTALL_INFO_PATH)
    echo "MYSQL_ROOT_PASSWORD: $MYSQL_ROOT_PASSWORD" > $OS_INSTALL_INFO_PATH
    echo "MYSQL_ADMIN_NAME: $MYSQL_ADMIN_NAME" >> $OS_INSTALL_INFO_PATH
    echo "MYSQL_ADMIN_PASSWORD: $MYSQL_ADMIN_PASSWORD" >> $OS_INSTALL_INFO_PATH
    echo "PHPMYADMIN_APP_PASS: $PHPMYADMIN_APP_PASS" >> $OS_INSTALL_INFO_PATH
    echo "PHPMYADMIN_ROOT_PASS: $PHPMYADMIN_ROOT_PASS" >> $OS_INSTALL_INFO_PATH
    echo "PHPMYADMIN_APP_DB_PASS: $PHPMYADMIN_APP_DB_PASS" >> $OS_INSTALL_INFO_PATH
    echo "" >> $OS_INSTALL_INFO_PATH
    echo "# Add to $GIT_GO_CONFIGS/ssh/home-.ssh-authorized_keys:" >> $OS_INSTALL_INFO_PATH
    echo "" >> $OS_INSTALL_INFO_PATH
    echo "# $SSH_KEY_NAME" >> $OS_INSTALL_INFO_PATH
    cat "$ADMIN_HOME_DIR/.ssh/id_rsa.pub" >> $OS_INSTALL_INFO_PATH
    echo "#" >> $OS_INSTALL_INFO_PATH
    chmod 400 $OS_INSTALL_INFO_PATH
    chown $ROOT_USER:$ROOT_USER $OS_INSTALL_INFO_PATH
    echo ""
    # echo "# IMPORTANT: Move the contents of $OS_INSTALL_INFO_PATH"
    # echo "#    into 1Password NOW, delete it, and reboot."
    # echo "# Once you continue, these passwords cannot be recovered."
    # echo ""
    rm $TEMP_PASSWORD_INCLUDE

# Cold Restore
    cold-restore

# Last instructions
	echo
	echo -en "\007" # Beep
    echo "Reboot using   sudo init 6"
    # echo "THEN run       sudo cold-restore"
    echo "THEN Reboot again."
    echo

# Include script footer file
	f_debug_variable "script_footer" "${PATHNAME[script_footer]}"
	source "${PATHNAME[script_footer]}"

exit 0

