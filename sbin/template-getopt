#!/bin/bash


###################################################
# Notes
#
# "getopts" is built into shell, which makes it run faster then "getopt", which is an external command
# But "getopts" does not support long command line arguments (e.g., shellscriptname --argument=value)
# RECOMMENDATION: Use getopt and not getopts (i.e., use this template)
# Following tutorial at https://www.shellscript.sh/tips/getopt/
# man page for getopt is at https://man7.org/linux/man-pages/man1/getopt.1.html
# Defining terms
#    argument: any text appended to a command (syn.: parameter)
#    parameter: synonym for argument
#    option: a command argument preceded by a single or double hyphen (e.g., -o, or --option)
#       An option may have an argument of its own (an "option argument", e.g., -o value-o, or --option value-o, or --option=value-o)
#       All options are arguments, but not all arguments are options.
#    short option: an option consisting of single hyphen and letter, with or without an option argument specified (e.g., -a value-a -b)
#    long option: an option consisting of a double hyphen and word, with or without an option argument specified (e.g., --arga value-a --argb=value-b --argc)
#    switch: a short or long option, with no option argument specified (e.g., -a --argb)
#       All switches are options, but not all options are switches.
#    remaining arguments: command line arguments that are neither options nor option arguments


###################################################
# Basic Setup

# Include script setup file
	source script-setup
	if [ ! $FUNCTIONS_ARE_DEFINED ]; then echo $0: Functions not defined. Aborting; logger $0: Functions not defined. Aborting; exit 1; fi
	if [ ! $VARIABLES_ARE_DEFINED ]; then echo $0: Variables not defined. Aborting; logger $0: Variables not defined. Aborting; exit 1; fi


###################################################
# Functions

function f_print_usage {
  echo Usage: $(basename "$0") [options] argument-1 argument-2 argument-3
  echo "Options:"
  echo "  -A --optionA                 Definition of option -A"
  echo "  -a value --optiona=value-a   Definition of option -a"
  echo "  -B --optionB                 Definition of option -B"
  echo "  -b value --optionb=value-b   Definition of option -b"
  echo "  -C --optionC                 Definition of option -C"
  echo "  -c value --optionc=value-c   Definition of option -c"
  echo "Example usage:     " sudo $(basename "$0") -A -a value-a -B -optionb=value-b -C -c value-c argument-1 argument-2 argument-3
}


###################################################
# Set default variable values
OPTION_A=false
OPTION_a=false
OPTION_B=false
OPTION_b=false
OPTION_C=false
OPTION_c=false
# Option arguments can remain undefined.


###################################################
# Parse options and arguments with getopt

# Note about the following call to getopt
#   Options used here with the getopt command itself
#       --name : Script name, used for reporting errors
#       --options : 
#       --longoptions :
#   Options used used with the getopt command itself
#       --alternative : Allow long options to start with a single '-'.
#       --help : Display help text and exit.  No other output is generated.
#       --quiet : 
#       --test : 
#       --unquoted :
#       --version : 
#   Colon after an option means an argument is required. 
#       In this example, options A, B, and C are switches; a, b, and c expect arguments
#       Similarly for long options, options optionA, optionB, and optionC are switches; optiona, optionb, and optionc expect arguments
#   Unclear what the '-- "$@"' at the end of the command is for.
PARSED_ARGUMENTS=$(getopt --name $(basename "$0") --options ABCa:b:c: --long optionA,optionB,optionC,optiona:,optionb:,optionc: -- "$@")
VALID_ARGUMENTS=$?
if [ "$VALID_ARGUMENTS" != "0" ]; then
  f_print_usage; exit -1
fi

echo $PARSED_ARGUMENTS
exit -0

while getopt ":A:a:B:b:C:c:" opt; do
    case ${opt} in
      A )  # Do something here or just set variables
           OPTION_A=true
           echo Option -A was selected.
           ;;
      a )  # Do something here or just set variables
           OPTION_a=true
           OPTION_a_ARGUMENT=$OPTARG
           echo Option -a was selected.
           echo Option -a argument: $$OPTION_a_ARGUMENT
           ;;
      B )  # Do something here or just set variables
           OPTION_B=true
           echo Option -B was selected.
           ;;
      b )  # Do something here or just set variables
           OPTION_b=true
           OPTION_b_ARGUMENT=$OPTARG
           echo Option -b was selected.
           echo Option -b argument: $$OPTION_b_ARGUMENT
           ;;
      C )  # Do something here or just set variables
           OPTION_C=true
           echo Option -C was selected.
           ;;
      c )  # Do something here or just set variables
           OPTION_c=true
           OPTION_c_ARGUMENT=$OPTARG
           echo Option -c was selected.
           echo Option -c argument: $$OPTION_c_ARGUMENT
           ;;
      \? ) f_print_usage
           ;;
      : )  echo "Invalid option: $OPTARG requires an argument" 1>&2
           ;;
  esac
done
shift $((OPTIND -1))


###################################################
# Do the work
# Do whatever the script is supposed to do

echo ARG_1: $1
echo ARG_2: $2
echo ARG_3: $3


###################################################
# Wrap up.

# Include script footer file
	f_debug_variable "script_footer" "${PATHNAME[script_footer]}"
	source "${PATHNAME[script_footer]}"
