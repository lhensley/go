#!/bin/bash
# process-ts
# Usage: process-ts <input_file> <work_root_path> <store_root_path>
# No final / on either path. For system root, use ""

# Include script setup file
source $(dirname $0)/script-setup

IN_FILE=$1
WORK_ROOT_PATH=$2
STORE_ROOT_PATH=$3

f_require_config "filter.transcode-excluded"
f_require_file "${LANE_CONFIG[script.move-one-file.pathname]}"

OUT_EXT="m4v"
FILTER_SCRIPT="/usr/local/sbin/tv-show-filter-status"

WORK_ROOT_PATH_LENGTH=${#WORK_ROOT_PATH}

IN_FILE_LENGTH=${#IN_FILE}
IN_FILE_EXT="${IN_FILE##*.}"
IN_FILE_EXT_LENGTH="${#IN_FILE_EXT}"

RELATIVE_FILE_LENGTH=$[IN_FILE_LENGTH-WORK_ROOT_PATH_LENGTH-1]
RELATIVE_FILE=${IN_FILE: -$RELATIVE_FILE_LENGTH} # First remove WORK_ROOT_PATH
RELATIVE_FILE_NO_EXT_LENGTH=$[RELATIVE_FILE_LENGTH-IN_FILE_EXT_LENGTH-1] # Recalculate relative path length by removing extension length
RELATIVE_FILE_NO_EXT=${RELATIVE_FILE:0:RELATIVE_FILE_NO_EXT_LENGTH} # Then remove IN_FILE_EXT
OUT_FILE="$WORK_ROOT_PATH/$RELATIVE_FILE_NO_EXT.$OUT_EXT"
STORE_FILE="$STORE_ROOT_PATH/$RELATIVE_FILE_NO_EXT.$OUT_EXT"
STORE_FILE="$STORE_ROOT_PATH/$RELATIVE_FILE_NO_EXT.$OUT_EXT"

# So here are useful variables defined ...
# $IN_FILE
# $OUT_FILE
# $STORE_FILE
# $WORK_ROOT_PATH
# $STORE_ROOT_PATH
# $RELATIVE_FILE

f_debug_variable "IN_FILE" "$IN_FILE"
f_debug_variable "OUT_FILE" "$OUT_FILE"
f_debug_variable "STORE_FILE" "$STORE_FILE"
f_debug_variable "WORK_ROOT_PATH" "$WORK_ROOT_PATH"
f_debug_variable "STORE_ROOT_PATH" "$STORE_ROOT_PATH"
f_debug_variable "RELATIVE_FILE" "$RELATIVE_FILE"
f_debug_variable "1" "$1"

# logger "$0: Transcoding $(basename $1)"

# sleep 30

# DEBUG
echo "$0 started." | mail lanecell

if $(f_filter "$IN_FILE" "${LANE_CONFIG[filter.transcode-excluded]}") ; then
    logger "$0: Skipped $IN_FILE"
else
    f_file_not_in_use "$IN_FILE"

#   logger "$0: started running /usr/local/sbin/transcode."
    ${LANE_CONFIG[script.transcode-ripped-dvds.pathname]} >> /dev/null 2>&1 # Pick up ripped DVDs first, if any
#   logger "$0: finished running /usr/local/sbin/transcode."

    # Do the transcoding
    TIMESTART=$(currenttimeinseconds)
    IN_FILE_BASE=$(basename $IN_FILE)
    logger "$0: DEBUG IN_FILE $IN_FILE"
    logger $0: Transcoding $IN_FILE_BASE
    "${LANE_CONFIG[handbrake.program]}" --preset-import-file "${LANE_CONFIG[handbrake.presets]}" \
        -i "$IN_FILE" -o "$OUT_FILE" >> /dev/null 2>&1
    exit_status=$?
    if [ $exit_status -ne 0 ]; then # If the transcoding failed ...
            logger "${LANE_CONFIG[handbrake.program]}: FAILED with $exit_status for $IN_FILE"
            echo "$(date) ${LANE_CONFIG[handbrake.program]}: FAILED with $exit_status for $RELATIVE_FILE" | mail -r "process-ts" lanecell
            exit $exit_status
        else
            rm "$IN_FILE" >> /dev/null 2>&1 # Delete input file
            logger $0: DEBUG: currenttimeinseconds $(currenttimeinseconds)
            logger $0: DEBUG: TIMESTART $TIMESTART
            logger $0: transcoding complete in $(timeformat $(( $(currenttimeinseconds) - TIMESTART )))
        fi # End of check for transcoding failure

    "${LANE_CONFIG[script.move-one-file.pathname]}" "$OUT_FILE" "$WORK_ROOT_PATH" "$STORE_ROOT_PATH"
    exit_status=$?
    if [ $exit_status -ne 0 ]; then # If the move failed ...
            logger "${LANE_CONFIG[script.move-one-file.pathname]}: FAILED with $exit_status for $IN_FILE"
            echo "$(date) ${LANE_CONFIG[script.move-one-file.pathname]}: FAILED with $exit_status for $RELATIVE_FILE" | mail -r "process-ts" lanecell
            exit $exit_status
        else
            rm "$IN_FILE" >> /dev/null 2>&1 # Delete input file
        fi # End of check for transcoding failure
    # Change permissions for Plex libraries
        find /var/lib/plexmediaserver/Library -type d -print -exec chmod 775 {} \; >> /dev/null 2>&1
        find /var/lib/plexmediaserver/Library -type f -print -exec chmod 664 {} \; >> /dev/null 2>&1
        chown -R plex:plex /var/lib/plexmediaserver/Library
	    find "$WORK_ROOT_PATH" -type d -print -exec chmod 775 {} \; >> /dev/null 2>&1
	    find "$WORK_ROOT_PATH" -type f -print -exec chmod 664 {} \; >> /dev/null 2>&1
	    find "$STORE_ROOT_PATH" -type d -print -exec chmod 775 {} \; >> /dev/null 2>&1
	    find "$STORE_ROOT_PATH" -type f -print -exec chmod 664 {} \; >> /dev/null 2>&1
        chown -R plex:plex "$WORK_ROOT_PATH"
        chown -R plex:plex "$STORE_ROOT_PATH"
fi

# Include script footer file
f_debug_variable "script.script-footer.pathname" "${LANE_CONFIG[script.script-footer.pathname]}"
source ${LANE_CONFIG[script.script-footer.pathname]}
