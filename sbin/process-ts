#!/bin/bash
# process_ts
# Usage: process_ts <input_file> <work_root_path> <store_root_path>
# No final / on either path. For system root, use ""

# Include script setup file
source $(dirname $0)/script-setup

IN_FILE=$1
WORK_ROOT_PATH=$2
STORE_ROOT_PATH=$3

OUT_EXT="m4v"
MOVE_SCRIPT="/usr/local/sbin/move-one-file"
FILTER_SCRIPT="/usr/local/sbin/tv-show-filter-status"

WORK_ROOT_PATH_LENGTH=${#WORK_ROOT_PATH}

IN_FILE_LENGTH=${#IN_FILE}
IN_FILE_EXT="${IN_FILE##*.}"
IN_FILE_EXT_LENGTH="${#IN_FILE_EXT}"

echo "$(date) $0 Point A"

RELATIVE_FILE_LENGTH=$[IN_FILE_LENGTH-WORK_ROOT_PATH_LENGTH-1]
echo "$(date) $0 Point A2"
echo "$(date) $0 Mode $(f_get-config system.debug-mode)"
if [ "$(f_get-config system.debug-mode)" == "true" ]; then 
    echo "$(date) $0 Point A3"
    echo "RELATIVE_FILE_LENGTH = $RELATIVE_FILE_LENGTH"
    echo "$(date) $0 Point A4"
    fi

echo "$(date) $0 Point B"

RELATIVE_FILE=${IN_FILE: -$RELATIVE_FILE_LENGTH} # First remove WORK_ROOT_PATH
if [ "$(f_get-config system.debug-mode)" == "true" ]; then 
    echo "2: $RELATIVE_FILE"
    fi

echo "$(date) $0 Point I"

RELATIVE_FILE_NO_EXT_LENGTH=$[RELATIVE_FILE_LENGTH-IN_FILE_EXT_LENGTH-1] # Recalculate relative path length by removing extension length
if [ "$(f_get-config system.debug-mode)" == "true" ]; then 
    echo "3: $RELATIVE_FILE_NO_EXT_LENGTH"
    fi

echo "$(date) $0 Point J"

RELATIVE_FILE_NO_EXT=${RELATIVE_FILE:0:RELATIVE_FILE_NO_EXT_LENGTH} # Then remove IN_FILE_EXT
if [ "$(f_get-config system.debug-mode)" == "true" ]; then 
    echo "4: $RELATIVE_FILE_NO_EXT"
    fi

echo "$(date) $0 Point K"

OUT_FILE="$WORK_ROOT_PATH/$RELATIVE_FILE_NO_EXT.$OUT_EXT"
STORE_FILE="$STORE_ROOT_PATH/$RELATIVE_FILE_NO_EXT.$OUT_EXT"
STORE_FILE="$STORE_ROOT_PATH/$RELATIVE_FILE_NO_EXT.$OUT_EXT"

HANDBRAKE="HandBrakeCLI"
PRESET="/home/lhensley/.HandBrake/Lane 1080p (BluRay).json"
echo "$(date) $0 Point L"

# So here are useful variables defined ...
# $IN_FILE
# $OUT_FILE
# $STORE_FILE
# $WORK_ROOT_PATH
# $STORE_ROOT_PATH
# $RELATIVE_FILE

logger "$0 started for '$1' from '$2' to '$3'"
echo "$(date) $0 Point M"

# Make sure only root can run our script
if [[ $EUID -ne 0 ]]; then
  echo "This script must be run as root."
  logger "$0: This script must be run as root."
  exit 1
fi

echo "$(date) $0 Point N"

$FILTER_SCRIPT "$IN_FILE"
exit_status=$?
logger "$0 Test filter status $exit_status"
if [ "$exit_status" == "0" ]; then

    echo "$(date) $0 Point O"

    # Make sure $IN_FILE exists
    if [ ! -f "$IN_FILE" ]; then
      logger "$0 no source file $IN_FILE"
      exit 1
      fi

    echo "$(date) $0 Point P"

    # Make sure $IN_FILE is not in use
    if [ -n "$(lsof "$IN_FILE" 2>/dev/null)" ]; then
        logger "$0: File in use and cannot be processed: $IN_FILE"
        exit 1
      fi

    echo "$(date) $0 Point Q"

    logger "$0: started running /usr/local/sbin/transcode."
    /usr/local/sbin/transcode >> /dev/null 2>&1 # Pick up ripped DVDs first, if any
    logger "$0: finished running /usr/local/sbin/transcode."

    echo "$(date) $0 Point R"

    # Do the transcoding
    TIMESTART=$(currenttimeinseconds)
    logger "$HANDBRAKE started transcoding of $IN_FILE"
    $HANDBRAKE --preset-import-file "$PRESET" \
        -i "$IN_FILE" -o "$OUT_FILE" >> /dev/null 2>&1
    exit_status=$?
    if [ $exit_status -ne 0 ]; then # If the transcoding failed ...
        logger "$HANDBRAKE FAILED with $exit_status for $IN_FILE"
        echo "$(date) $HANDBRAKE FAILED with $exit_status for $RELATIVE_FILE" | mail -r "process-ts" lanecell
        exit $exit_status
      else
        rm "$IN_FILE" >> /dev/null 2>&1 # Delete input file
        logger "$HANDBRAKE transcoding complete in $(timeformat $(( $(currenttimeinseconds) - TIMESTART ))) for $OUT_FILE"
      fi # End of check for transcoding failure

    echo "$(date) $0 Point S"

    $MOVE_SCRIPT "$OUT_FILE" "$WORK_ROOT_PATH" "$STORE_ROOT_PATH"
    exit_status=$?
    if [ $exit_status -ne 0 ]; then # If the move failed ...
        logger "$MOVE_SCRIPT FAILED with $exit_status for $IN_FILE"
        echo "$(date) $MOVE_SCRIPT FAILED with $exit_status for $RELATIVE_FILE" | mail -r "process-ts" lanecell
        exit $exit_status
      else
        rm "$IN_FILE" >> /dev/null 2>&1 # Delete input file
      fi # End of check for transcoding failure

    echo "$(date) $0 Point T"

    # Change permissions for Plex libraries
	find "$WORK_ROOT_PATH" -type d -print -exec chmod 775 {} \; >> /dev/null 2>&1
	find "$WORK_ROOT_PATH" -type f -print -exec chmod 664 {} \; >> /dev/null 2>&1
	find "$STORE_ROOT_PATH" -type d -print -exec chmod 775 {} \; >> /dev/null 2>&1
	find "$STORE_ROOT_PATH" -type f -print -exec chmod 664 {} \; >> /dev/null 2>&1
    chown -R plex:plex "$WORK_ROOT_PATH"
    chown -R plex:plex "$STORE_ROOT_PATH"

    logger "$0 exited without error."
    echo "$(date) $0 Point U"
    exit $exit_status

else

    if [ "$(f_get-config system.debug-mode)" == "true" ]; then 
        echo "$0: \$0: $0"
        echo "$0: \$1: $1"
        echo "$(date) $0 Point V"
        echo "$0: \$FILTER_SCRIPT: $FILTER_SCRIPT"
        fi
    echo "$(date) $0 Point W"
    logger "$0: $1 not processed because it matched in $FILTER_SCRIPT."
    echo "$(date) $0 Point X"

fi

echo "$(date) $0 Point Y"


# Include script footer file
source $(dirname $0)/script-footer

echo "$(date) $0 Point Z"
