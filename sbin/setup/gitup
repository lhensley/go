#!/bin/bash
# gitup
# PURPOSE: Installs basic software, including calling setup-os
# IMPORTANT: Check variables at the top of the script before running it!

install_apache2=true
install_openssl=true
install_php=true
install_certbot=true
install_mailutils=false
install_mysql_server=false
install_phpmyadmin=false
install_plexmediaserver=true
install_tautulli=false
install_webmin=false
install_zoom=true
install_chrome=true
install_lsyncd=true
install_makemkv=true
install_handbrake=true
install_rclone=true

# Make sure we're root.
if [[ $EUID -ne 0 ]]; then
        echo "Use sudo. $0 must be run as root." 1>&2
        exit 1
    fi
# Install git and ufw and open the git port
DEBIAN_FRONTEND=noninteractive apt-get install -yq git
ufw allow git
# Configure git
cd
git config --global user.name "Lane Hensley"
git config --global user.email "lane.hensley@alumni.duke.edu"
git config --global credential.helper store
git config --global credential.helper cache
git config --global credential.helper 'cache --timeout=600'
# Install git token
# To get a new token, go to https://github.com/settings/tokens.
# NOTE: this token allows deployment only.
MY_GIT_TOKEN=8224e3fbc597bf523d30906d038158977763b2e1
git config --global url."https://api:$MY_GIT_TOKEN@github.com/".insteadOf "https://github.com/"
git config --global url."https://ssh:$MY_GIT_TOKEN@github.com/".insteadOf "ssh://git@github.com/"
git config --global url."https://git:$MY_GIT_TOKEN@github.com/".insteadOf "git@github.com:"
cp /root/.gitconfig $HOME_DIR/.gitconfig
chown root:root /root/.gitconfig
chown $USER_ME:$USER_ME $HOME_DIR/.gitconfig
chmod 600 $HOME_DIR/.gitconfig
chmod 600 /root/.gitconfig

# Wipe out existing git and /usr/local/sbin
rm -rf /var/local/git /usr/local/sbin

# Clone go.git and set restrictive permissions
mkdir -p /var/local/git
chmod 775 /var/local/git
cd /var/local/git
git clone https://github.com/lhensley/go.git
chown -R root:root /var/local/git
chmod -R 400 /var/local/git
cd

# Copy scripts into /usr/local/sbin
cp -r /var/local/git/go/sbin /usr/local
chown -R root:root /usr/local/sbin
find /usr/local/sbin -type d -print0 | sudo xargs -0 chmod 750
find /usr/local/sbin -type f -print0 | sudo xargs -0 chmod 540

# Do updates
apt-get update && apt -y dist-upgrade && apt -y clean && apt -y autoremove


##########################################################################################################################
##########################################################################################################################
##########################################################################################################################


# Pick up with contents of from older setup-os script

# Include script setup file
	source script-setup
	if [ ! $FUNCTIONS_ARE_DEFINED ]; then echo $0: Functions not defined. Aborting; logger $0: Functions not defined. Aborting; fi
	if [ ! $VARIABLES_ARE_DEFINED ]; then echo $0: Variables not defined. Aborting; logger $0: Variables not defined. Aborting; fi

if [[ $NAME = "Ubuntu" ]]; then
    if [[ $(echo $VERSION_ID | cut -c1-3) = "20." ]]; then
      echo "Ubuntu version 20 confirmed."
    else
      echo "This script does not support version $VERSION_ID of Ubuntu."
      exit 1
    fi
else
  echo "This script works only on Ubuntu."
  exit 1
fi

# Make a copy of /etc/fstab as installed
cp "/etc/fstab" "/etc/fstab-installed-$START_DATEANDTIMESTAMP"

# Add peripherals to /etc/fstab
    for KEY in "${!MOUNT_POINT_DEFINITION[@]}"; do 
        mkdir -p "/mnt/$KEY"
        if [ ! -z "${MOUNT_POINT_DEFINITION["$KEY"]}" ] || [ ! -z "${MOUNT_POINT_DEFINITION["$KEY"]}" ]; then
            echo "" >> /etc/fstab
        fi
        if [ ! -z "${MOUNT_POINT_DESCRIPTION["$KEY"]}" ]; then
            echo "# ${MOUNT_POINT_DESCRIPTION["$KEY"]}" >> /etc/fstab
        fi
        if [ ! -z "${MOUNT_POINT_DEFINITION["$KEY"]}" ]; then
            echo "${MOUNT_POINT_DEFINITION["$KEY"]}" >> /etc/fstab
        fi
        if [ ! -z "${MOUNT_POINT_DEFINITION["$KEY"]}" ] || [ ! -z "${MOUNT_POINT_DEFINITION["$KEY"]}" ]; then
            echo "" >> /etc/fstab
        fi
    done

# Unmount peripherals currently mounted under /media/$LOGNAME/*
umount "/media/$LOGNAME/"*

# Remount all using /etc/fstab, as amended above
mount --all

# Add ufw
f_install ufw

# Install MakeMKV
# DON'T USE THE SNAP INSTALLER
if $install_makemkv ; then
  echo "Installing MakeMKV"
  add-apt-repository ppa:heyarje/makemkv-beta
  apt-get update
  printf '\n\n' | DEBIAN_FRONTEND=noninteractive apt-get install -yq makemkv-bin makemkv-oss ccextractor
  usermod -a -G cdrom $ADMIN_USER
  # MakeMKV config file
    if [ -f $GIT_GO_CONFIGS/makemkv/settings.conf ]; then
	    mkdir -p $ADMIN_HOME_DIR/.MakeMKV
	    mkdir -p $ROOT_HOME_DIR/.MakeMKV
	    cp $GIT_GO_CONFIGS/makemkv/settings.conf $ADMIN_HOME_DIR/.MakeMKV/
	    chmod 600 $ADMIN_HOME_DIR/.MakeMKV/settings.conf
	    chown -R $ADMIN_USER:$ADMIN_USER $ADMIN_HOME_DIR/.MakeMKV
	    cp $ADMIN_HOME_DIR/.MakeMKV/settings.conf $ROOT_HOME_DIR/.MakeMKV/
	    chown -R $ROOT_USER:$ROOT_USER $ROOT_HOME_DIR/.MakeMKV
	    fi
  echo "MakeMKV installed."
  fi

# IMPORTANT: Make sure this comes AFTER fstab installation and adaptation. The plex links and file systems need to exist.
if $install_plexmediaserver ; then
    # Tested through Ubuntu 20.04.1
    # Install Plex Media Server
      echo "Installing Plex Media Server"
      ln -s /mnt/ssd1tb /var/lib/plexmediaserver/Library/work
      ln -s /mnt/ext10tb01 /var/lib/plexmediaserver/Library/store
      rm -rf /etc/apt/sources.list.d/plexmediaserver.list
      echo "# When enabling this repo please remember to add the PlexPublic.Key into the apt setup." > /etc/apt/sources.list.d/plexmediaserver.list
      echo "# wget -q https://downloads.plex.tv/plex-keys/PlexSign.key -O - | sudo apt-key add -" >> /etc/apt/sources.list.d/plexmediaserver.list >> /etc/apt/sources.list.d/plexmediaserver.list
      echo "#" >> /etc/apt/sources.list.d/plexmediaserver.list >> /etc/apt/sources.list.d/plexmediaserver.list
      echo "deb https://downloads.plex.tv/repo/deb/ public main" >> /etc/apt/sources.list.d/plexmediaserver.list >> /etc/apt/sources.list.d/plexmediaserver.list
      wget -q https://downloads.plex.tv/plex-keys/PlexSign.key -O - | sudo apt-key add -
      apt-get -y update
      f_install plexmediaserver
      ufw allow 32400/tcp # if not already specified
      echo "Plex Media Server installed."
    # Install Tautulli for https://this-server:8181
    # Ref: https://tautulli.com/
        DEBIAN_FRONTEND=noninteractive apt-get install -yq python python-setuptools tzdata
        cd /opt
        git clone https://github.com/Tautulli/Tautulli.git
        addgroup tautulli && sudo adduser --system --no-create-home tautulli --ingroup tautulli
        cp /opt/Tautulli/init-scripts/init.systemd /lib/systemd/system/tautulli.service
        chown tautulli:tautulli -R /opt/Tautulli
        systemctl daemon-reload
        systemctl enable tautulli.service
        systemctl start tautulli.service
        ufw allow 8181
        cd
  fi

# Install uncomplicated, no-down-side utilities (formerly install-utils)
    f_install ufw
    # UFW first; others depend on it
    f_install at
    f_install apg                     # Password generator 
    f_install cryfs                   # Encrypted file system
    f_install comskip                 # Commercial skipper for videos
    f_install curl
    f_install ddclient
    f_install exiftool
    f_install fail2ban
    f_install ffmpeg
    f_install filezilla
    f_install ghostscript             # Compressing PDF scans
    f_install gimp
    f_install git && ufw allow git
    f_install gpg
    f_install gzip
    f_install inotify-tools           # Do something when a file is created, deleted, or changed
    f_install net-tools
    f_install openssl
    f_install openvpn
    f_install bridge-utils
    f_install ifupdown
    f_install proftpd                 # For scanning to brother@oz
    f_install resolvconf
    f_install ripmime                 # Process files sent by email
    f_install ssh && ufw allow ssh
    f_install sysbench
    f_install tasksel
    f_install unzip
    # f_install uuid                  # Use uuidgen instead. It's built-in.
    f_install vim
    f_install wget
    f_install xrdp

    ufw allow http
    ufw allow https

NUMBER_OF_DESIGNATED_PASSWORDS=7
TEMP_PASSWORD_INCLUDE="/tmp/passwords"
echo "" > $TEMP_PASSWORD_INCLUDE
echo "PASSWORD_ME=\"$(apg -c cl_seed -a 1 -m $LENGTH_OF_PASSWORDS -n 1 -E $EXCLUDED_PASSWORD_CHARACTERS)\"" >> $TEMP_PASSWORD_INCLUDE
# echo "PASSWORD_UBUNTU=\"$(apg -c cl_seed -a 1 -m $LENGTH_OF_PASSWORDS -n 1 -E $EXCLUDED_PASSWORD_CHARACTERS)\"" >> $TEMP_PASSWORD_INCLUDE
echo "MYSQL_ROOT_PASSWORD=\"$(apg -c cl_seed -a 1 -m $MAX_MYSQL_PASSWORD_LENGTH -n 1 -E $EXCLUDED_PASSWORD_CHARACTERS)\"" >> $TEMP_PASSWORD_INCLUDE
echo "MYSQL_ADMIN_PASSWORD=\"$(apg -c cl_seed -a 1 -m $MAX_MYSQL_PASSWORD_LENGTH -n 1 -E $EXCLUDED_PASSWORD_CHARACTERS)\"" >> $TEMP_PASSWORD_INCLUDE
echo "PHPMYADMIN_APP_PASS=\"$(apg -c cl_seed -a 1 -m $LENGTH_OF_PASSWORDS -n 1 -E $EXCLUDED_PASSWORD_CHARACTERS)\"" >> $TEMP_PASSWORD_INCLUDE
echo "PHPMYADMIN_ROOT_PASS=\"$(apg -c cl_seed -a 1 -m $LENGTH_OF_PASSWORDS -n 1 -E $EXCLUDED_PASSWORD_CHARACTERS)\"" >> $TEMP_PASSWORD_INCLUDE
echo "PHPMYADMIN_APP_DB_PASS=\"$(apg -c cl_seed -a 1 -m $LENGTH_OF_PASSWORDS -n 1 -E $EXCLUDED_PASSWORD_CHARACTERS)\"" >> $TEMP_PASSWORD_INCLUDE
echo "" >> $TEMP_PASSWORD_INCLUDE

chown $ROOT_USER:$ROOT_USER $TEMP_PASSWORD_INCLUDE
chmod 500 $TEMP_PASSWORD_INCLUDE
source $TEMP_PASSWORD_INCLUDE

# Update hostname
echo "Updating hostname"
hostnamectl set-hostname $HOSTNAME
echo $HOSTNAME > /etc/hostname
chmod 644 /etc/hostname
chown $ROOT_USER:$ROOT_USER /etc/hostname

# Install ssh
apt-get update
DEBIAN_FRONTEND=noninteractive apt-get install -yq ufw ssh
ufw allow ssh

# Set up $ADMIN_USER
    # Make $ADMIN_USER a member of group sudo
        usermod -aG sudo $ADMIN_USER
    # Generate SSH keys for $ADMIN_USER
    # Should this occur somewhere else? SSH setup?
        sudo -u $ADMIN_USER ssh-keygen -C "$SSH_KEY_NAME" -P "" -q -f "$ADMIN_HOME_DIR/.ssh/id_rsa"

# Configure sudo user(s)
echo Configure sudo $ADMIN_USER as a sudo user
echo "$ADMIN_USER ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/lane-NOPASSWD-users
# echo "$USER_UBUNTU ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers.d/lane-NOPASSWD-users
chmod 440 /etc/sudoers.d/lane-NOPASSWD-users

# Add custom application definitions for ufw
echo "Adding custom application definitions for ufw"
cp $GIT_GO_CONFIGS/lane-applications /etc/ufw/applications.d
chown $ROOT_USER:$ROOT_USER /etc/ufw/applications.d/lane-applications
chmod 644 /etc/ufw/applications.d/lane-applications
ufw app update lane-applications
echo "Special LANE applications installed to ufw."

if $install_apache2 ; then
  echo "Installing apache2"
  DEBIAN_FRONTEND=noninteractive apt-get install -yq apache2 apache2-doc apache2-suexec-pristine
  ufw allow 'Apache'
  ufw allow 'Apache Full'
  ufw allow http
  ufw allow https
  a2enmod ssl rewrite
  systemctl restart apache2
  echo "apache2 installed."
  fi

# Install Google Chrome
DEBIAN_FRONTEND=noninteractive apt-get install -yq wget gdebi-core
wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
gdebi --n google-chrome-stable_current_amd64.deb
rm ./google-chrome-stable_current_amd64.deb

if $install_openssl ; then
  echo "Installing openssl"
  OPENSSL_PACKAGES="openssl libcurl4-openssl-dev libssl-dev libcurl4-doc"
  OPENSSL_PACKAGES+=" libidn11-dev libkrb5-dev libldap2-dev "
  OPENSSL_PACKAGES+=" librtmp-dev libssh2-1-dev zlib1g-dev libssl-doc"
  DEBIAN_FRONTEND=noninteractive apt-get install -yq $OPENSSL_PACKAGES 
  echo "openssl installed."
  fi

if $install_php ; then
  echo "Installing php"
  PHP_PACKAGES="php libapache2-mod-php php-mysql php-gd php-curl php-imap php-ldap"
  PHP_PACKAGES+=" libmcrypt-dev php-mbstring php-dev php-pear"
  PHP_PACKAGES+=" libc-client2007e mlock php-curl php-imap uw-mailutils"
  DEBIAN_FRONTEND=noninteractive apt-get install -yq $PHP_PACKAGES
  phpenmod gd curl imap ldap mbstring
  systemctl restart apache2
  echo "php installed."
  fi

# Install local fstab options
    #echo "Installing rclone"
    #DEBIAN_FRONTEND=noninteractive apt-get install -yq curl
    #curl https://rclone.org/install.sh | sudo bash

# Install rclone
    echo "Installing rclone"
    DEBIAN_FRONTEND=noninteractive apt-get install -yq curl
    curl https://rclone.org/install.sh | sudo bash

if $enable_certbot ; then
  echo "Installing certbot"
  DEBIAN_FRONTEND=noninteractive apt-get install -yq certbot python3-certbot-apache
  echo "certbot installed."
  fi

if $install_mailutils ; then
  echo "installing mailutils"
  debconf-set-selections <<< "postfix postfix/relayhost $RELAYHOST"
  debconf-set-selections <<< "postfix postfix/mailname string $MAILNAME"
  debconf-set-selections <<< "postfix postfix/main_mailer_type string $MAIN_MAILER_TYPE"
  apt-get install -y mailutils
  ufw allow mail
  echo "mailutils installed."
  fi
  
if $install_mysql_server ; then
  echo "Installing mysql server"
###### EXTREMELY IMPORTANT: Edit /etc/mysql/mysql.conf.d/mysqld.cnf and open up bind-address * ###########
  MYSQL_PACKAGES="mysql-server openssl libcurl4-openssl-dev libssl-dev php-gmp php-symfony-service-implementation php-imagick php-twig-doc php-symfony-translation"
  DEBIAN_FRONTEND=noninteractive apt-get install -yq $MYSQL_PACKAGES
  ufw allow mysql
  mysqladmin -u root password "$MYSQL_ROOT_PASSWORD"
  mysql -u root -p"$MYSQL_ROOT_PASSWORD" -e "DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1')"
  mysql -u root -p"$MYSQL_ROOT_PASSWORD" -e "DELETE FROM mysql.user WHERE User=''"
  mysql -u root -p"$MYSQL_ROOT_PASSWORD" -e "DELETE FROM mysql.db WHERE Db='test' OR Db='test_%'"
  mysql -u root -p"$MYSQL_ROOT_PASSWORD" -e "CREATE USER '$MYSQL_ADMIN_NAME'@'localhost' IDENTIFIED WITH caching_sha2_password BY '$MYSQL_ADMIN_PASSWORD'"
  mysql -u root -p"$MYSQL_ROOT_PASSWORD" -e "GRANT ALL PRIVILEGES ON *.* TO '$MYSQL_ADMIN_NAME'@localhost WITH GRANT OPTION"
  mysql -u root -p"$MYSQL_ROOT_PASSWORD" -e "FLUSH PRIVILEGES"
  mkdir -p $MYSQL_CLIENT_CERTS_DIR
  cp "$MYSQL_SERVER_BIN_DIR/ca.pem" "$MYSQL_CLIENT_CERTS_DIR/$HOSTNAME-MySQL-ca.pem"
  cp "$MYSQL_SERVER_BIN_DIR/client-cert.pem" "$MYSQL_CLIENT_CERTS_DIR/$HOSTNAME-MySQL-client-cert.pem"
  cp "$MYSQL_SERVER_BIN_DIR/client-key.pem" "$MYSQL_CLIENT_CERTS_DIR/$HOSTNAME-MySQL-client-key.pem"
  chown -R $ADMIN_USER:$ADMIN_USER "$MYSQL_CLIENT_CERTS_DIR"
  # Install .my.cnf in home directory
    backup-file $ADMIN_HOME_DIR/.my.cnf
    cp $GIT_GO_CONFIGS/mysql/home_directory_.my.cnf $ADMIN_HOME_DIR/.my.cnf
    replace-in-file "$ADMIN_HOME_DIR/.my.cnf" "UserValue" "$MYSQL_ADMIN_NAME"
    replace-in-file "$ADMIN_HOME_DIR/.my.cnf" "PasswordValue" "$MYSQL_ADMIN_PASSWORD"
    chown $ADMIN_USER:$ADMIN_USER "$ADMIN_HOME_DIR/.my.cnf"*
    chmod 600 "$ADMIN_HOME_DIR/.my.cnf"*
  # Install .my.cnf for root user
    backup-file $ROOT_HOME_DIR/.my.cnf
    cp $GIT_GO_CONFIGS/mysql/home_directory_.my.cnf $ROOT_HOME_DIR/.my.cnf
    replace-in-file "$ROOT_HOME_DIR/.my.cnf" "UserValue" "$MYSQL_ADMIN_NAME"
    replace-in-file "$ROOT_HOME_DIR/.my.cnf" "PasswordValue" "$MYSQL_ADMIN_PASSWORD"
    chown $ROOT_USER:$ROOT_USER "$ROOT_HOME_DIR/.my.cnf"*
    chmod 600 "$ROOT_HOME_DIR/.my.cnf"*
  echo "MySQL server installed."
  fi

# phpMyAdmin should be installed AFTER php and MySQL
if $install_phpmyadmin ; then
  echo "Installing phpMyAdmin"
  # Based on https://www.digitalocean.com/community/tutorials/how-to-install-and-secure-phpmyadmin-on-ubuntu-20-04
  debconf-set-selections <<< "phpmyadmin phpmyadmin/reconfigure-webserver multiselect apache2"
  debconf-set-selections <<< "phpmyadmin phpmyadmin/dbconfig-install boolean true"
  debconf-set-selections <<< "phpmyadmin phpmyadmin/app-password-confirm password $PHPMYADMIN_APP_PASS"
  debconf-set-selections <<< "phpmyadmin phpmyadmin/mysql/admin-pass password $PHPMYADMIN_ROOT_PASS"
  debconf-set-selections <<< "phpmyadmin phpmyadmin/mysql/app-pass password $PHPMYADMIN_APP_DB_PASS"
  apt install -y phpmyadmin php-mbstring php-zip php-gd php-json php-curl
  phpenmod mbstring
  cp $GIT_GO_CONFIGS/phpmyadmin.config.inc.php $PHPMYADMIN_DIR/config.inc.php
  chown -R www-data:www-data $PHPMYADMIN_DIR
  chmod 644 $PHPMYADMIN_DIR/config.inc.php
#  cp $GIT_GO_CONFIGS/html/.htaccess.html.www.var $THIS_WEB_ROOT/.htaccess
#  chown -R www-data:www-data $THIS_WEB_ROOT/.htaccess
#  chmod 644 $THIS_WEB_ROOT/.htaccess
  systemctl restart apache2
  echo "phpMyAdmin installed."
  fi

if $install_webmin ; then
  echo "Installing Webmin"
  wget http://www.webmin.com/download/deb/webmin-current.deb
  WEBMIN_PACKAGES="openssl libcurl4-openssl-dev libssl-dev perl libnet-ssleay-perl libauthen-pam-perl"
  WEBMIN_PACKAGES="$WEBMIN_PACKAGES libnet-ssleay-perl libauthen-pam-perl libpam-runtime"
  WEBMIN_PACKAGES="$WEBMIN_PACKAGES libio-pty-perl apt-show-versions python libsocket6-perl"
  DEBIAN_FRONTEND=noninteractive apt-get install -yq $WEBMIN_PACKAGES
  dpkg --install webmin-current.deb
  rm webmin-current.deb
  ufw allow webmin
  echo "Webmin installed."
  fi

# Install Zoom Client
if $install_zoom ; then
  echo "Installing Zoom Client"
  wget https://zoom.us/client/latest/zoom_amd64.deb
  DEBIAN_FRONTEND=noninteractive apt-get install -yq ./zoom_amd64.deb
  rm ./zoom_amd64.deb
  echo "Zoom Client installed."
  fi

# Install Google Chrome
if $install_chrome ; then
  echo "Installing Google Chrome"
  DEBIAN_FRONTEND=noninteractive apt-get install -yq gdebi-core
  wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
  gdebi --n google-chrome-stable_current_amd64.deb
  rm ./google-chrome-stable_current_amd64.deb
  echo "Google Chrome installed."
  fi

# Install lsyncd
if $install_lsyncd ; then
  echo "Installing lsyncd"
  DEBIAN_FRONTEND=noninteractive apt-get install -yq lsyncd rsync
  mkdir -p /etc/lsyncd
  mkdir -p /var/log/lsyncd
  systemctl start lsyncd
  systemctl enable lsyncd
  echo "lsyncd installed."
  fi

# Set up some cron jobs
echo "Adding cronjobs"
crontab -l > $TEMP_CRON
if grep -Fxq "ddclient" $TEMP_CRON
then
    unlink $TEMP_CRON
else
    echo "@reboot /usr/sbin/ddclient -daemon $DDCLIENT_INTERVAL -syslog #Updates dyndns.org" >> $TEMP_CRON
    echo "@reboot echo \"$(hostname) booted\" | mail $LANE_CELL #Bootup Notification" >> $TEMP_CRON
    echo "59 23 * * * $SBIN_DIR/secureserver #Secure Server" >> $TEMP_CRON
    crontab $TEMP_CRON
    unlink $TEMP_CRON
fi

if $install_handbrake ; then
  echo "Installing HandBrake"
  add-apt-repository -y ppa:stebbins/handbrake-releases
  apt-get update
  DEBIAN_FRONTEND=noninteractive apt-get install -yq handbrake-gtk handbrake-cli
  echo "HandBrake installed."
  echo "GUI version is NOT configured: "
  echo "  Presets ($ADMIN_HOME_DIR/.HandBrake/*) need to be added."
  fi

# Ref: https://askubuntu.com/questions/1058750/new-alert-keeps-showing-up-server-returned-error-nxdomain-mitigating-potential
# This corrects a problem in which you'll get constant syslog errors:
#    Server returned error NXDOMAIN, mitigating potential DNS violation DVE-2018-0001, retrying transaction with reduced feature level UDP.
# If this causes trouble, you can restore the original link with
#    sudo ln -sf ../run/resolvconf/resolv.conf /etc/resolv.conf
ln -sf /run/systemd/resolve/resolv.conf /etc/resolv.conf

# Invoke /usr/local/sbin/_apply-configs
# chmod 777 $SBIN_DIR/_apply-configsHOME
$SBIN_DIR/_apply-configs

mkdir -p $(dirname $OS_INSTALL_INFO_PATH)
echo "MYSQL_ROOT_PASSWORD: $MYSQL_ROOT_PASSWORD" > $OS_INSTALL_INFO_PATH
echo "MYSQL_ADMIN_NAME: $MYSQL_ADMIN_NAME" >> $OS_INSTALL_INFO_PATH
echo "MYSQL_ADMIN_PASSWORD: $MYSQL_ADMIN_PASSWORD" >> $OS_INSTALL_INFO_PATH
echo "PHPMYADMIN_APP_PASS: $PHPMYADMIN_APP_PASS" >> $OS_INSTALL_INFO_PATH
echo "PHPMYADMIN_ROOT_PASS: $PHPMYADMIN_ROOT_PASS" >> $OS_INSTALL_INFO_PATH
echo "PHPMYADMIN_APP_DB_PASS: $PHPMYADMIN_APP_DB_PASS" >> $OS_INSTALL_INFO_PATH
echo "" >> $OS_INSTALL_INFO_PATH
echo "# Add to $GIT_GO_CONFIGS/ssh/home-.ssh-authorized_keys:" >> $OS_INSTALL_INFO_PATH
echo "" >> $OS_INSTALL_INFO_PATH
echo "# $SSH_KEY_NAME" >> $OS_INSTALL_INFO_PATH
cat "$ADMIN_HOME_DIR/.ssh/id_rsa.pub" >> $OS_INSTALL_INFO_PATH
echo "#" >> $OS_INSTALL_INFO_PATH
chmod 400 $OS_INSTALL_INFO_PATH
chown $ROOT_USER:$ROOT_USER $OS_INSTALL_INFO_PATH
echo ""
# echo "# IMPORTANT: Move the contents of $OS_INSTALL_INFO_PATH"
# echo "#    into 1Password NOW, delete it, and reboot."
# echo "# Once you continue, these passwords cannot be recovered."
# echo ""
rm $TEMP_PASSWORD_INCLUDE

# Last instructions
	echo
	echo -en "\007" # Beep
    echo "Reboot using   sudo init 6"
    echo "THEN run       sudo cold-restore"
    echo "THEN Reboot again."
    echo

# Include script footer file
	f_debug_variable "script_footer" "${PATHNAME[script_footer]}"
	source "${PATHNAME[script_footer]}"

exit 0

